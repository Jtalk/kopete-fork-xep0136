/* This file was autogenerated by makekdewidgets. Any changes will be lost! */ 
#include <qwidgetplugin.h>

#include <kinstance.h>
#include "kopetelistview.h"
#ifndef EMBED_IMAGES
#include <kstandarddirs.h>
#endif

class KopeteWidgets : public QWidgetPlugin
{
public:
	KopeteWidgets();
	
	virtual ~KopeteWidgets();
	
	virtual QStringList keys() const
	{
		QStringList result;
		for (WidgetInfos::ConstIterator it = m_widgets.begin(); it != m_widgets.end(); ++it)
			result << it.key();
		return result;
	}
	
	virtual QWidget *create(const QString &key, QWidget *parent = 0, const char *name = 0);
	
	virtual QIconSet iconSet(const QString &key) const
	{
#ifdef EMBED_IMAGES
		QPixmap pix(m_widgets[key].iconSet);
#else
		QPixmap pix(locate("data", QString::fromLatin1("kopetewidgets/pics/") + m_widgets[key].iconSet));
#endif
		return QIconSet(pix);
	}
	
	virtual bool isContainer(const QString &key) const { return m_widgets[key].isContainer; }
	
	virtual QString group(const QString &key) const { return m_widgets[key].group; }
	
	virtual QString includeFile(const QString &key) const { return m_widgets[key].includeFile; }
	
	virtual QString toolTip(const QString &key) const { return m_widgets[key].toolTip; }
	
	virtual QString whatsThis(const QString &key) const { return m_widgets[key].whatsThis; }
private:
	struct WidgetInfo
	{
		QString group;
#ifdef EMBED_IMAGES
		QPixmap iconSet;
#else
		QString iconSet;
#endif
		QString includeFile;
		QString toolTip;
		QString whatsThis;
		bool isContainer;
	};
	typedef QMap<QString, WidgetInfo> WidgetInfos;
	WidgetInfos m_widgets;
};
KopeteWidgets::KopeteWidgets()
{
        WidgetInfo widget;

	widget.group = "Views (Kopete)";
#ifdef EMBED_IMAGES
	widget.iconSet = QPixmap(kopete__ui__listview__listview_xpm);
#else
	widget.iconSet = "kopete__ui__listview__listview.png";
#endif
	widget.includeFile = "kopete/ui/kopetelistview.h";
	widget.toolTip = "List View (Kopete)";
	widget.whatsThis = "A component capable list view widget.";
	widget.isContainer = false;
	m_widgets.insert(QString::fromLatin1("Kopete::UI::ListView::ListView"), widget);

	new KInstance("kopetewidgets");
}
KopeteWidgets::~KopeteWidgets()
{
	
}
QWidget *KopeteWidgets::create(const QString &key, QWidget *parent, const char *name)
{

         if (key == QString::fromLatin1("Kopete::UI::ListView::ListView"))
                return new Kopete::UI::ListView::ListView(parent, name);

	return 0;
}
KDE_Q_EXPORT_PLUGIN(KopeteWidgets)

