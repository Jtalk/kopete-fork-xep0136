Index: iris/include/im.h
===================================================================
--- iris/include/im.h	(revision 770063)
+++ iris/include/im.h	(working copy)
@@ -25,6 +25,8 @@
 //Added by qt3to4:
 #include <QList>
 
+#include <iris_export.h>
+
 #include "xmpp.h"
 #include "xmpp_jid.h"
 #include "xmpp_muc.h"
@@ -58,7 +60,7 @@
 	typedef QList<AgentItem> AgentList;
 	typedef QList<DiscoItem> DiscoList;
 
-	class FormField
+	class IRIS_EXPORT FormField
 	{
 	public:
 		enum { username, nick, password, name, first, last, email, address, city, state, zip, phone, url, date, misc };
@@ -85,7 +87,7 @@
 		Private *d;
 	};
 
-	class Form : public QList<FormField>
+	class IRIS_EXPORT Form : public QList<FormField>
 	{
 	public:
 		Form(const Jid &j="");
@@ -106,7 +108,7 @@
 		Private *d;
 	};
 
-	class SearchResult
+	class IRIS_EXPORT SearchResult
 	{
 	public:
 		SearchResult(const Jid &jid="");
Index: iris/include/xmpp_liverosteritem.h
===================================================================
--- iris/include/xmpp_liverosteritem.h	(revision 770063)
+++ iris/include/xmpp_liverosteritem.h	(working copy)
@@ -20,13 +20,15 @@
 #ifndef XMPP_LIVEROSTERITEM_H
 #define XMPP_LIVEROSTERITEM_H
 
+#include <iris_export.h>
+
 #include "xmpp_status.h"
 #include "xmpp_resourcelist.h"
 #include "xmpp_rosteritem.h"
 
 namespace XMPP
 {
-	class LiveRosterItem : public RosterItem
+	class IRIS_EXPORT LiveRosterItem : public RosterItem
 	{
 	public:
 		LiveRosterItem(const Jid &j="");
Index: iris/include/xmpp_client.h
===================================================================
--- iris/include/xmpp_client.h	(revision 770063)
+++ iris/include/xmpp_client.h	(working copy)
@@ -23,6 +23,8 @@
 #include <QObject>
 #include <QStringList>
 
+#include <iris_export.h>
+
 #include "xmpp_jid.h"
 #include "xmpp_status.h"
 #include "xmpp_discoitem.h"
@@ -50,7 +52,7 @@
 
 namespace XMPP
 {
-	class Client : public QObject
+	class IRIS_EXPORT Client : public QObject
 	{
 		Q_OBJECT
 
Index: iris/include/xmpp_features.h
===================================================================
--- iris/include/xmpp_features.h	(revision 770063)
+++ iris/include/xmpp_features.h	(working copy)
@@ -23,11 +23,12 @@
 
 #include <QStringList>
 
+#include <iris_export.h>
 class QString;
 
 namespace XMPP
 {
-	class Features
+	class IRIS_EXPORT Features
 	{
 	public:
 		Features();
Index: iris/include/xmpp_htmlelement.h
===================================================================
--- iris/include/xmpp_htmlelement.h	(revision 770063)
+++ iris/include/xmpp_htmlelement.h	(working copy)
@@ -21,12 +21,13 @@
 #define XMPP_HTMLELEMENT_H
 
 #include <QDomElement>
+#include <iris_export.h>
 
 class QString;
 
 namespace XMPP
 {
-	class HTMLElement
+	class IRIS_EXPORT HTMLElement
 	{
 	public:
 		HTMLElement();
Index: iris/include/xmpp.h
===================================================================
--- iris/include/xmpp.h	(revision 770063)
+++ iris/include/xmpp.h	(working copy)
@@ -30,6 +30,8 @@
 #include <qxml.h>
 #include <qdom.h>
 
+#include <iris_export.h>
+
 #include "xmpp_jid.h"
 #include "xmpp_stanza.h"
 #include "xmpp_stream.h"
@@ -68,7 +70,7 @@
 
 	void setDebug(Debug *);
 
-	class Connector : public QObject
+	class IRIS_EXPORT Connector : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -100,7 +102,7 @@
 		Q_UINT16 port;
 	};
 
-	class AdvancedConnector : public Connector
+	class IRIS_EXPORT AdvancedConnector : public Connector
 	{
 		Q_OBJECT
 	public:
@@ -174,7 +176,7 @@
 		void tryNextSrv();
 	};
 
-	class TLSHandler : public QObject
+	class IRIS_EXPORT TLSHandler : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -194,7 +196,7 @@
 		void readyReadOutgoing(const QByteArray &a, int plainBytes);
 	};
 
-	class QCATLSHandler : public TLSHandler
+	class IRIS_EXPORT QCATLSHandler : public TLSHandler
 	{
 		Q_OBJECT
 	public:
Index: iris/include/xmpp_discoitem.h
===================================================================
--- iris/include/xmpp_discoitem.h	(revision 770063)
+++ iris/include/xmpp_discoitem.h	(working copy)
@@ -28,7 +28,7 @@
 #include "xmpp_agentitem.h"
 
 namespace XMPP {
-	class DiscoItem
+	class IRIS_EXPORT DiscoItem
 	{
 	public:
 		DiscoItem();
Index: iris/include/xmpp_status.h
===================================================================
--- iris/include/xmpp_status.h	(revision 770063)
+++ iris/include/xmpp_status.h	(working copy)
@@ -24,11 +24,12 @@
 #include <QString>
 #include <QDateTime>
 
+#include <iris_export.h>
 #include "xmpp_muc.h"
 
 namespace XMPP 
 {
-	class Status
+	class IRIS_EXPORT Status
 	{
 	public:
 		enum Type { Offline, Online, Away, XA, DND, Invisible, FFC };
Index: iris/include/xmpp_message.h
===================================================================
--- iris/include/xmpp_message.h	(revision 770063)
+++ iris/include/xmpp_message.h	(working copy)
@@ -20,6 +20,8 @@
 #ifndef XMPP_MESSAGE_H
 #define XMPP_MESSAGE_H
 
+#include <iris_export.h>
+
 #include "xmpp_stanza.h"
 #include "xmpp_url.h"
 #include "xmpp_chatstate.h"
@@ -42,7 +44,7 @@
 	typedef enum { OfflineEvent, DeliveredEvent, DisplayedEvent,
 			ComposingEvent, CancelEvent } MsgEvent;
 
-	class Message
+	class IRIS_EXPORT Message
 	{
 	public:
 		Message(const Jid &to="");
Index: iris/include/xmpp_resource.h
===================================================================
--- iris/include/xmpp_resource.h	(revision 770063)
+++ iris/include/xmpp_resource.h	(working copy)
@@ -22,11 +22,13 @@
 
 #include <QString>
 
+#include <iris_export.h>
+
 #include "xmpp_status.h"
 
 namespace XMPP
 {
-	class Resource
+	class IRIS_EXPORT Resource
 	{
 	public:
 		Resource(const QString &name="", const Status &s=Status());
Index: iris/include/xmpp_clientstream.h
===================================================================
--- iris/include/xmpp_clientstream.h	(revision 770063)
+++ iris/include/xmpp_clientstream.h	(working copy)
@@ -24,6 +24,8 @@
 
 #include "xmpp_stream.h"
 
+#include <iris_export.h>
+
 class QByteArray;
 class QString;
 class QDomDocument;
@@ -37,7 +39,7 @@
 	class TLSHandler;
 	class Connector;
 
-	class ClientStream : public Stream
+	class IRIS_EXPORT ClientStream : public Stream
 	{
 		Q_OBJECT
 	public:
Index: iris/include/xmpp_stream.h
===================================================================
--- iris/include/xmpp_stream.h	(revision 770063)
+++ iris/include/xmpp_stream.h	(working copy)
@@ -24,6 +24,8 @@
 #include <QDomElement>
 #include <QObject>
 
+#include <iris_export.h>
+
 #include "xmpp_stanza.h"
 #include "xmpp_jid.h"
 
@@ -31,7 +33,7 @@
 
 namespace XMPP 
 {
-	class Stream : public QObject
+	class IRIS_EXPORT Stream : public QObject
 	{
 		Q_OBJECT
 	public:
Index: iris/include/xmpp_rosteritem.h
===================================================================
--- iris/include/xmpp_rosteritem.h	(revision 770063)
+++ iris/include/xmpp_rosteritem.h	(working copy)
@@ -23,11 +23,13 @@
 #include <QString>
 #include <QStringList>
 
+#include <iris_export.h>
+
 #include "xmpp_jid.h"
 
 namespace XMPP
 {
-	class Subscription
+	class IRIS_EXPORT Subscription
 	{
 	public:
 		enum SubType { None, To, From, Both, Remove };
@@ -43,7 +45,7 @@
 		SubType value;
 	};
 
-	class RosterItem
+	class IRIS_EXPORT RosterItem
 	{
 	public:
 		RosterItem(const Jid &jid="");
Index: iris/include/xmpp_stanza.h
===================================================================
--- iris/include/xmpp_stanza.h	(revision 770063)
+++ iris/include/xmpp_stanza.h	(working copy)
@@ -24,6 +24,8 @@
 #include <QString>
 #include <QDomElement>
 
+#include <iris_export.h>
+
 class QDomDocument;
 
 namespace XMPP 
@@ -31,7 +33,7 @@
 	class Jid;
 	class Stream;
 
-	class Stanza
+	class IRIS_EXPORT Stanza
 	{
 	public:
 		enum Kind { Message, Presence, IQ };
Index: iris/include/xmpp_xdata.h
===================================================================
--- iris/include/xmpp_xdata.h	(revision 770056)
+++ iris/include/xmpp_xdata.h	(working copy)
@@ -27,12 +27,14 @@
 #include <QSharedDataPointer>
 #include <QStringList>
 
+#include <iris_export.h>
+
 class QDomElement;
 class QDomDocument;
 
 namespace XMPP {
 
-	class XData
+	class IRIS_EXPORT XData
 	{
 	public:
 		XData();
@@ -69,7 +71,7 @@
 		bool isValid() const;
 
 	public:
-		class Field {
+		class IRIS_EXPORT Field {
 		public:
 			Field();
 			~Field();
Index: iris/include/xmpp_task.h
===================================================================
--- iris/include/xmpp_task.h	(revision 770063)
+++ iris/include/xmpp_task.h	(working copy)
@@ -24,6 +24,8 @@
 #include <QObject>
 #include <QString>
 
+#include <iris_export.h>
+
 class QDomDocument;
 class QDomElement;
 
@@ -31,7 +33,7 @@
 	class Client;
 	class Jid;
 
-	class Task : public QObject
+	class IRIS_EXPORT Task : public QObject
 	{
 		Q_OBJECT
 	public:
Index: iris/include/xmpp_url.h
===================================================================
--- iris/include/xmpp_url.h	(revision 770063)
+++ iris/include/xmpp_url.h	(working copy)
@@ -22,9 +22,11 @@
 
 class QString;
 
+#include <iris_export.h>
+
 namespace XMPP
 {
-	class Url
+	class IRIS_EXPORT Url
 	{
 	public:
 		Url(const QString &url="", const QString &desc="");
Index: iris/include/xmpp_jid.h
===================================================================
--- iris/include/xmpp_jid.h	(revision 770063)
+++ iris/include/xmpp_jid.h	(working copy)
@@ -23,9 +23,11 @@
 
 #include <QString>
 
+#include <iris_export.h>
+
 namespace XMPP 
 {
-	class Jid
+	class IRIS_EXPORT Jid
 	{
 	public:
 		Jid();
Index: iris/include/xmpp_agentitem.h
===================================================================
--- iris/include/xmpp_agentitem.h	(revision 770063)
+++ iris/include/xmpp_agentitem.h	(working copy)
@@ -27,7 +27,7 @@
 #include "xmpp_features.h"
 
 namespace XMPP {
-	class AgentItem
+	class IRIS_EXPORT AgentItem
 	{
 	public:
 		AgentItem() { }
Index: iris/include/xmpp_pubsubitem.h
===================================================================
--- iris/include/xmpp_pubsubitem.h	(revision 770056)
+++ iris/include/xmpp_pubsubitem.h	(working copy)
@@ -23,9 +23,11 @@
 #include <QString>
 #include <QDomElement>
 
+#include <iris_export.h>
+
 namespace XMPP
 {
-	class PubSubItem 
+	class IRIS_EXPORT PubSubItem 
 	{
 	public:
 		PubSubItem();
Index: iris/include/xmpp_resourcelist.h
===================================================================
--- iris/include/xmpp_resourcelist.h	(revision 770063)
+++ iris/include/xmpp_resourcelist.h	(working copy)
@@ -22,13 +22,15 @@
 
 #include <QList>
 
+#include <iris_export.h>
+
 #include "xmpp_resource.h"
 
 class QString;
 
 namespace XMPP
 {
-	class ResourceList : public QList<Resource>
+	class IRIS_EXPORT ResourceList : public QList<Resource>
 	{
 	public:
 		ResourceList();
Index: iris/jabber/s5b.h
===================================================================
--- iris/jabber/s5b.h	(revision 770063)
+++ iris/jabber/s5b.h	(working copy)
@@ -27,6 +27,8 @@
 #include <QList>
 #include <QHostAddress>
 
+#include <iris_export.h>
+
 #include "bytestream.h"
 #include "xmpp_jid.h"
 #include "xmpp_task.h"
@@ -46,7 +48,7 @@
 	typedef Q3PtrList<S5BConnection> S5BConnectionList;
 	typedef Q3PtrListIterator<S5BConnection> S5BConnectionListIt;
 
-	class S5BDatagram
+	class IRIS_EXPORT S5BDatagram
 	{
 	public:
 		S5BDatagram();
@@ -61,7 +63,7 @@
 		QByteArray _buf;
 	};
 
-	class S5BConnection : public ByteStream
+	class IRIS_EXPORT S5BConnection : public ByteStream
 	{
 		Q_OBJECT
 	public:
@@ -131,7 +133,7 @@
 		S5BConnection(S5BManager *, QObject *parent=0);
 	};
 
-	class S5BManager : public QObject
+	class IRIS_EXPORT S5BManager : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -200,7 +202,7 @@
 		void doActivate(const Jid &peer, const QString &sid, const Jid &streamHost);
 	};
 
-	class S5BConnector : public QObject
+	class IRIS_EXPORT S5BConnector : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -231,7 +233,7 @@
 	};
 
 	// listens on a port for serving
-	class S5BServer : public QObject
+	class IRIS_EXPORT S5BServer : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -264,7 +266,7 @@
 		void writeUDP(const QHostAddress &addr, int port, const QByteArray &data);
 	};
 
-	class JT_S5B : public Task
+	class IRIS_EXPORT JT_S5B : public Task
 	{
 		Q_OBJECT
 	public:
@@ -290,7 +292,7 @@
 		Private *d;
 	};
 
-	struct S5BRequest
+	struct IRIS_EXPORT S5BRequest
 	{
 		Jid from;
 		QString id, sid;
@@ -298,7 +300,7 @@
 		bool fast;
 		bool udp;
 	};
-	class JT_PushS5B : public Task
+	class IRIS_EXPORT JT_PushS5B : public Task
 	{
 		Q_OBJECT
 	public:
@@ -320,7 +322,7 @@
 		void incomingActivate(const Jid &from, const QString &sid, const Jid &streamHost);
 	};
 
-	class StreamHost
+	class IRIS_EXPORT StreamHost
 	{
 	public:
 		StreamHost();
Index: iris/jabber/xmpp_ibb.h
===================================================================
--- iris/jabber/xmpp_ibb.h	(revision 770063)
+++ iris/jabber/xmpp_ibb.h	(working copy)
@@ -34,7 +34,7 @@
 	class IBBManager;
 
 	// this is an IBB connection.  use it much like a qsocket
-	class IBBConnection : public ByteStream
+	class IRIS_EXPORT IBBConnection : public ByteStream
 	{
 		Q_OBJECT
 	public:
@@ -78,7 +78,7 @@
 
 	typedef Q3PtrList<IBBConnection> IBBConnectionList;
 	typedef Q3PtrListIterator<IBBConnection> IBBConnectionListIt;
-	class IBBManager : public QObject
+	class IRIS_EXPORT IBBManager : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -111,7 +111,7 @@
 		void doReject(IBBConnection *c, const QString &id, int, const QString &);
 	};
 
-	class JT_IBB : public Task
+	class IRIS_EXPORT JT_IBB : public Task
 	{
 		Q_OBJECT
 	public:
Index: iris/jabber/filetransfer.h
===================================================================
--- iris/jabber/filetransfer.h	(revision 770063)
+++ iris/jabber/filetransfer.h	(working copy)
@@ -40,7 +40,7 @@
 			virtual void accept(qlonglong offset=0, qlonglong length=0) = 0;
 	};*/
 
-	class FileTransfer : public QObject /*, public AbstractFileTransfer */
+	class IRIS_EXPORT FileTransfer : public QObject /*, public AbstractFileTransfer */
 	{
 		Q_OBJECT
 	public:
@@ -101,7 +101,7 @@
 		void takeConnection(S5BConnection *c);
 	};
 
-	class FileTransferManager : public QObject
+	class IRIS_EXPORT FileTransferManager : public QObject
 	{
 		Q_OBJECT
 	public:
@@ -134,7 +134,7 @@
 		void unlink(FileTransfer *);
 	};
 
-	class JT_FT : public Task
+	class IRIS_EXPORT JT_FT : public Task
 	{
 		Q_OBJECT
 	public:
Index: iris/xmpp-im/xmpp_tasks.h
===================================================================
--- iris/xmpp-im/xmpp_tasks.h	(revision 770063)
+++ iris/xmpp-im/xmpp_tasks.h	(working copy)
@@ -35,7 +35,7 @@
 	class Roster;
 	class Status;
 
-	class JT_Register : public Task
+	class IRIS_EXPORT JT_Register : public Task
 	{
 		Q_OBJECT
 	public:
@@ -66,7 +66,7 @@
 		Private *d;
 	};
 
-	class JT_UnRegister : public Task
+	class IRIS_EXPORT JT_UnRegister : public Task
 	{
 		Q_OBJECT
 	public:
@@ -86,7 +86,7 @@
 		Private *d;
 	};
 
-	class JT_Roster : public Task
+	class IRIS_EXPORT JT_Roster : public Task
 	{
 		Q_OBJECT
 	public:
@@ -114,7 +114,7 @@
 		Private *d;
 	};
 
-	class JT_PushRoster : public Task
+	class IRIS_EXPORT JT_PushRoster : public Task
 	{
 		Q_OBJECT
 	public:
@@ -131,7 +131,7 @@
 		Private *d;
 	};
 
-	class JT_Presence : public Task
+	class IRIS_EXPORT JT_Presence : public Task
 	{
 		Q_OBJECT
 	public:
@@ -152,7 +152,7 @@
 		Private *d;
 	};
 
-	class JT_PushPresence : public Task
+	class IRIS_EXPORT JT_PushPresence : public Task
 	{
 		Q_OBJECT
 	public:
@@ -170,7 +170,7 @@
 		Private *d;
 	};
 	
-	class JT_Session : public Task
+	class IRIS_EXPORT JT_Session : public Task
 	{
 	public:
 		JT_Session(Task *parent);
@@ -178,7 +178,7 @@
 		bool take(const QDomElement&);
 	};
 
-	class JT_Message : public Task
+	class IRIS_EXPORT JT_Message : public Task
 	{
 		Q_OBJECT
 	public:
@@ -194,7 +194,7 @@
 		Private *d;
 	};
 
-	class JT_PushMessage : public Task
+	class IRIS_EXPORT JT_PushMessage : public Task
 	{
 		Q_OBJECT
 	public:
@@ -211,7 +211,7 @@
 		Private *d;
 	};
 
-	class JT_GetServices : public Task
+	class IRIS_EXPORT JT_GetServices : public Task
 	{
 		Q_OBJECT
 	public:
@@ -233,7 +233,7 @@
 		AgentList agentList;
 	};
 
-	class JT_VCard : public Task
+	class IRIS_EXPORT JT_VCard : public Task
 	{
 		Q_OBJECT
 	public:
@@ -256,7 +256,7 @@
 		Private *d;
 	};
 
-	class JT_Search : public Task
+	class IRIS_EXPORT JT_Search : public Task
 	{
 		Q_OBJECT
 	public:
@@ -280,7 +280,7 @@
 		Private *d;
 	};
 
-	class JT_ClientVersion : public Task
+	class IRIS_EXPORT JT_ClientVersion : public Task
 	{
 		Q_OBJECT
 	public:
@@ -319,7 +319,7 @@
 		QDomElement iq;
 	};
 */
-	class JT_ServInfo : public Task
+	class IRIS_EXPORT JT_ServInfo : public Task
 	{
 		Q_OBJECT
 	public:
@@ -329,7 +329,7 @@
 		bool take(const QDomElement &);
 	};
 
-	class JT_Gateway : public Task
+	class IRIS_EXPORT JT_Gateway : public Task
 	{
 		Q_OBJECT
 	public:
@@ -352,7 +352,7 @@
 		QString v_prompt, v_desc;
 	};
 
-	class JT_Browse : public Task
+	class IRIS_EXPORT JT_Browse : public Task
 	{
 		Q_OBJECT
 	public:
@@ -374,7 +374,7 @@
 		AgentItem browseHelper (const QDomElement &i);
 	};
 
-	class JT_DiscoItems : public Task
+	class IRIS_EXPORT JT_DiscoItems : public Task
 	{
 		Q_OBJECT
 	public:
@@ -394,7 +394,7 @@
 		Private *d;
 	};
 
-	class JT_DiscoPublish : public Task
+	class IRIS_EXPORT JT_DiscoPublish : public Task
 	{
 		Q_OBJECT
 	public:
Index: iris/xmpp-im/xmpp_xmlcommon.h
===================================================================
--- iris/xmpp-im/xmpp_xmlcommon.h	(revision 770056)
+++ iris/xmpp-im/xmpp_xmlcommon.h	(working copy)
@@ -23,6 +23,7 @@
 
 #include <qdom.h>
 
+#include <iris_export.h>
 class QDateTime;
 class QRect;
 class QSize;
@@ -34,9 +35,9 @@
 QString TS2stamp(const QDateTime &d);
 QDomElement textTag(QDomDocument *doc, const QString &name, const QString &content);
 QString tagContent(const QDomElement &e);
-QDomElement findSubTag(const QDomElement &e, const QString &name, bool *found);
-QDomElement createIQ(QDomDocument *doc, const QString &type, const QString &to, const QString &id);
-QDomElement queryTag(const QDomElement &e);
+QDomElement IRIS_EXPORT findSubTag(const QDomElement &e, const QString &name, bool *found);
+QDomElement IRIS_EXPORT createIQ(QDomDocument *doc, const QString &type, const QString &to, const QString &id);
+QDomElement IRIS_EXPORT queryTag(const QDomElement &e);
 QString queryNS(const QDomElement &e);
 void getErrorFromElement(const QDomElement &e, const QString &baseNS, int *code, QString *str);
 QDomElement addCorrectNS(const QDomElement &e);
Index: iris/xmpp-im/xmpp_vcard.h
===================================================================
--- iris/xmpp-im/xmpp_vcard.h	(revision 770063)
+++ iris/xmpp-im/xmpp_vcard.h	(working copy)
@@ -28,11 +28,12 @@
 #include <QList>
 #include <qdom.h>
 
+#include <iris_export.h>
 class QDate;
 
 namespace XMPP
 {
-	class VCard
+	class IRIS_EXPORT VCard
 	{
 	public:
 		VCard();
@@ -85,7 +86,7 @@
 		void setBdayStr(const QString &);
 
 
-		class Address {
+		class IRIS_EXPORT Address {
 		public:
 			Address();
 
@@ -111,7 +112,7 @@
 		const AddressList &addressList() const;
 		void setAddressList(const AddressList &);
 
-		class Label {
+		class IRIS_EXPORT Label {
 		public:
 			Label();
 
@@ -132,7 +133,7 @@
 		void setLabelList(const LabelList &);
 
 
-		class Phone {
+		class IRIS_EXPORT Phone {
 		public:
 			Phone();
 
@@ -157,7 +158,7 @@
 		void setPhoneList(const PhoneList &);
 
 
-		class Email {
+		class IRIS_EXPORT Email {
 		public:
 			Email();
 
@@ -183,7 +184,7 @@
 		void setTimezone(const QString &);
 
 
-		class Geo {
+		class IRIS_EXPORT Geo {
 		public:
 			Geo();
 
@@ -215,7 +216,7 @@
 		void setAgentURI(const QString &);
 
 
-		class Org {
+		class IRIS_EXPORT Org {
 		public:
 			Org();
 
Index: iris/xmpp-im/xmpp_discoinfotask.h
===================================================================
--- iris/xmpp-im/xmpp_discoinfotask.h	(revision 770056)
+++ iris/xmpp-im/xmpp_discoinfotask.h	(working copy)
@@ -23,6 +23,8 @@
 #include "xmpp_task.h"
 #include "xmpp_discoitem.h"
 
+#include <iris_export.h>
+
 namespace XMPP {
 	class Jid;
 }
@@ -31,7 +33,7 @@
 
 namespace XMPP
 {
-	class DiscoInfoTask : public Task
+	class IRIS_EXPORT DiscoInfoTask : public Task
 	{
 		Q_OBJECT
 	public:
Index: cutestuff/legacy/srvresolver.h
===================================================================
--- cutestuff/legacy/srvresolver.h	(revision 770063)
+++ cutestuff/legacy/srvresolver.h	(working copy)
@@ -24,9 +24,10 @@
 #include <QList>
 #include <q3dns.h>
 
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
-class SrvResolver : public QObject
+class CUTESTUFF_EXPORT SrvResolver : public QObject
 {
 	Q_OBJECT
 public:
Index: cutestuff/legacy/servsock.h
===================================================================
--- cutestuff/legacy/servsock.h	(revision 770063)
+++ cutestuff/legacy/servsock.h	(working copy)
@@ -22,10 +22,10 @@
 #define CS_SERVSOCK_H
 
 #include <QTcpServer>
-
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
-class ServSock : public QObject
+class CUTESTUFF_EXPORT ServSock : public QObject
 {
 	Q_OBJECT
 public:
@@ -49,7 +49,7 @@
 	Private *d;
 };
 
-class ServSockSignal : public QTcpServer
+class CUTESTUFF_EXPORT ServSockSignal : public QTcpServer
 {
 	Q_OBJECT
 public:
Index: cutestuff/legacy/ndns.h
===================================================================
--- cutestuff/legacy/ndns.h	(revision 770063)
+++ cutestuff/legacy/ndns.h	(working copy)
@@ -28,13 +28,14 @@
 #include <qhostaddress.h>
 //Added by qt3to4:
 #include <QEvent>
+#include "cutestuff_export.h"
 
 // CS_NAMESPACE_BEGIN
 
 class NDnsWorker;
 class NDnsManager;
 
-class NDns : public QObject
+class CUTESTUFF_EXPORT NDns : public QObject
 {
 	Q_OBJECT
 public:
@@ -58,7 +59,7 @@
 	void finished(const QHostAddress &);
 };
 
-class NDnsManager : public QObject
+class CUTESTUFF_EXPORT NDnsManager : public QObject
 {
 	Q_OBJECT
 public:
Index: cutestuff/network/httpconnect.h
===================================================================
--- cutestuff/network/httpconnect.h	(revision 770063)
+++ cutestuff/network/httpconnect.h	(working copy)
@@ -23,9 +23,10 @@
 
 #include "bytestream.h"
 
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
-class HttpConnect : public ByteStream
+class CUTESTUFF_EXPORT HttpConnect : public ByteStream
 {
 	Q_OBJECT
 public:
Index: cutestuff/network/bsocket.h
===================================================================
--- cutestuff/network/bsocket.h	(revision 770063)
+++ cutestuff/network/bsocket.h	(working copy)
@@ -23,6 +23,7 @@
 
 #include <QAbstractSocket>
 
+#include "cutestuff_export.h"
 #include "bytestream.h"
 
 class QString;
@@ -31,7 +32,7 @@
 
 // CS_NAMESPACE_BEGIN
 
-class BSocket : public ByteStream
+class CUTESTUFF_EXPORT BSocket : public ByteStream
 {
 	Q_OBJECT
 public:
Index: cutestuff/network/socks.h
===================================================================
--- cutestuff/network/socks.h	(revision 770063)
+++ cutestuff/network/socks.h	(working copy)
@@ -22,14 +22,14 @@
 #define CS_SOCKS_H
 
 #include "bytestream.h"
-
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
 class QHostAddress;
 class SocksClient;
 class SocksServer;
 
-class SocksUDP : public QObject
+class CUTESTUFF_EXPORT SocksUDP : public QObject
 {
 	Q_OBJECT
 public:
@@ -52,7 +52,7 @@
 	SocksUDP(SocksClient *sc, const QString &host, int port, const QHostAddress &routeAddr, int routePort);
 };
 
-class SocksClient : public ByteStream
+class CUTESTUFF_EXPORT SocksClient : public ByteStream
 {
 	Q_OBJECT
 public:
@@ -125,7 +125,7 @@
 	void writeData(const QByteArray &a);
 };
 
-class SocksServer : public QObject
+class CUTESTUFF_EXPORT SocksServer : public QObject
 {
 	Q_OBJECT
 public:
Index: cutestuff/network/httppoll.h
===================================================================
--- cutestuff/network/httppoll.h	(revision 770063)
+++ cutestuff/network/httppoll.h	(working copy)
@@ -22,10 +22,10 @@
 #define CS_HTTPPOLL_H
 
 #include "bytestream.h"
-
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
-class HttpPoll : public ByteStream
+class CUTESTUFF_EXPORT HttpPoll : public ByteStream
 {
 	Q_OBJECT
 public:
@@ -67,7 +67,7 @@
 	const QString & getKey(bool *);
 };
 
-class HttpProxyPost : public QObject
+class CUTESTUFF_EXPORT HttpProxyPost : public QObject
 {
 	Q_OBJECT
 public:
Index: cutestuff/util/bytestream.h
===================================================================
--- cutestuff/util/bytestream.h	(revision 770063)
+++ cutestuff/util/bytestream.h	(working copy)
@@ -23,11 +23,11 @@
 
 #include <qobject.h>
 #include <q3cstring.h>
-
+#include "cutestuff_export.h"
 // CS_NAMESPACE_BEGIN
 
 // CS_EXPORT_BEGIN
-class ByteStream : public QObject
+class CUTESTUFF_EXPORT ByteStream : public QObject
 {
 	Q_OBJECT
 public:
