Index: iris/include/im.h
===================================================================
RCS file: /psi/iris/include/im.h,v
retrieving revision 1.8
diff -u -r1.8 im.h
--- iris/include/im.h	23 Feb 2004 19:20:09 -0000	1.8
+++ iris/include/im.h	24 Feb 2004 19:56:09 -0000
@@ -47,6 +47,9 @@
 
 	typedef QValueList<Url> UrlList;
 	typedef QMap<QString, QString> StringMap;
+	typedef enum { OfflineEvent, DeliveredEvent, DisplayedEvent,
+			ComposingEvent, CancelEvent } MsgEvent;
+                                           
 	class Message
 	{
 	public:
@@ -85,6 +88,13 @@
 		void urlsClear();
 		void setUrlList(const UrlList &list);
 
+		// JEP-0022
+		QString eventId() const;
+		void setEventId(const QString& id);
+		bool containsEvents() const;
+		bool containsEvent(MsgEvent e) const;
+		void addEvent(MsgEvent e);
+ 
 		// JEP-0027
 		QString xencrypted() const;
 		void setXEncrypted(const QString &s);
Index: iris/xmpp-im/types.cpp
===================================================================
RCS file: /psi/iris/xmpp-im/types.cpp,v
retrieving revision 1.6
diff -u -r1.6 types.cpp
--- iris/xmpp-im/types.cpp	25 Nov 2003 17:45:15 -0000	1.6
+++ iris/xmpp-im/types.cpp	24 Feb 2004 19:56:09 -0000
@@ -187,6 +187,8 @@
 	// extensions
 	QDateTime timeStamp;
 	UrlList urlList;
+	QValueList<MsgEvent> eventList;
+	QString eventId;
 	QString xencrypted, invite;
 
 	bool spooled, wasEncrypted;
@@ -389,6 +391,35 @@
 	d->urlList = list;
 }
 
+QString Message::eventId() const
+{
+	return d->eventId;
+}
+
+void Message::setEventId(const QString& id)
+{
+	d->eventId = id;
+}
+
+bool Message::containsEvents() const
+{
+	return !d->eventList.isEmpty();
+}
+
+bool Message::containsEvent(MsgEvent e) const
+{
+	return d->eventList.contains(e);
+}
+
+void Message::addEvent(MsgEvent e)
+{
+	if (!d->eventList.contains(e)) {
+		if (e == CancelEvent || containsEvent(CancelEvent)) 
+			d->eventList.clear(); // Reset list
+		d->eventList += e;
+	}
+}
+
 QString Message::xencrypted() const
 {
 	return d->xencrypted;
@@ -478,6 +509,39 @@
 		s.appendChild(x);
 	}
 
+	// events
+	if (!d->eventList.isEmpty()) {
+		QDomElement x = s.createElement("jabber:x:event", "x");
+
+		if (d->body.isEmpty()) {
+			if (d->eventId.isEmpty())
+				x.appendChild(s.createElement("jabber:x:event","id"));
+			else
+				x.appendChild(s.createTextElement("jabber:x:event","id",d->eventId));
+		}
+
+		for(QValueList<MsgEvent>::ConstIterator ev = d->eventList.begin(); ev != d->eventList.end(); ++ev) {
+			switch (*ev) {
+				case OfflineEvent:
+					x.appendChild(s.createElement("jabber:x:event", "offline"));
+					break;
+				case DeliveredEvent:
+					x.appendChild(s.createElement("jabber:x:event", "delivered"));
+					break;
+				case DisplayedEvent:
+					x.appendChild(s.createElement("jabber:x:event", "displayed"));
+					break;
+				case ComposingEvent: 
+					x.appendChild(s.createElement("jabber:x:event", "composing"));
+					break;
+				case CancelEvent:
+					// Add nothing
+					break;
+			}
+		}
+		s.appendChild(x);
+	} 
+
 	// xencrypted
 	if(!d->xencrypted.isEmpty())
 		s.appendChild(s.createTextElement("jabber:x:encrypted", "x", d->xencrypted));
@@ -557,6 +621,27 @@
 		u.setUrl(t.elementsByTagName("url").item(0).toElement().text());
 		u.setDesc(t.elementsByTagName("desc").item(0).toElement().text());
 		d->urlList += u;
+	}
+	
+        // events
+	d->eventList.clear();
+	nl = root.elementsByTagNameNS("jabber:x:event", "x");
+	if (nl.count()) {
+		nl = nl.item(0).childNodes();
+		for(n = 0; n < nl.count(); ++n) {
+			QString evtag = nl.item(n).toElement().tagName();
+			if (evtag == "id") {
+				d->eventId =  nl.item(n).toElement().text();
+			}
+			else if (evtag == "displayed")
+				d->eventList += DisplayedEvent;
+			else if (evtag == "composing")
+				d->eventList += ComposingEvent;
+			else if (evtag == "delivered")
+				d->eventList += DeliveredEvent;
+		}
+		if (d->eventList.isEmpty())
+			d->eventList += CancelEvent;
 	}
 
 	// xencrypted
