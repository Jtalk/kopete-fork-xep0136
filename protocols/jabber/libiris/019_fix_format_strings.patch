
this patch fixes format string abuse in the libs

--- iris/xmpp-im/xmpp_vcard.cpp
+++ iris/xmpp-im/xmpp_vcard.cpp
@@ -28,6 +28,7 @@
 #include <QImageReader>
 #include <QImageWriter>
 #include <QtCrypto>
+#include <QtCore/QDebug>
 
 #include "xmpp_xmlcommon.h"
 
@@ -60,7 +61,7 @@ QString image2type(const QByteArray &ba)
 	if ( format.toUpper() == "JPEG" )
 		return "image/jpeg";
 
-	qWarning(QString("WARNING! VCard::image2type: unknown format = '%1'").arg(format.isNull() ? QString("UNKNOWN") : format).toAscii());
+	qWarning() << QString("WARNING! VCard::image2type: unknown format = '%1'").arg(format.isNull() ? QString("UNKNOWN") : format).toAscii();
 
 	return "image/unknown";
 }
--- iris/xmpp-core/compress.cpp
+++ iris/xmpp-core/compress.cpp
@@ -35,7 +35,7 @@ void Compressor::flush()
 	write(QByteArray(),true);
 	int result = deflateEnd(zlib_stream_);
 	if (result != Z_OK) 
-		qWarning(QString("compressor.c: deflateEnd failed (%1)").arg(result).toAscii());
+		qWarning() << QString("compressor.c: deflateEnd failed (%1)").arg(result).toAscii();
 	
 	flushed_ = true;
 }
@@ -60,7 +60,7 @@ int Compressor::write(const QByteArray&
 		zlib_stream_->next_out = (Bytef*) (output.data() + output_position);
 		result = deflate(zlib_stream_,(flush ? Z_FINISH : Z_NO_FLUSH));
 		if (result == Z_STREAM_ERROR) {
-			qWarning(QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii());
+			qWarning() << QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii();
 			return result;
 		}
 		output_position += CHUNK_SIZE;
@@ -79,7 +79,7 @@ int Compressor::write(const QByteArray&
 			zlib_stream_->next_out = (Bytef*) (output.data() + output_position);
 			result = deflate(zlib_stream_,Z_SYNC_FLUSH);
 			if (result == Z_STREAM_ERROR) {
-				qWarning(QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii());
+				qWarning() << QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii();
 				return result;
 			}
 			output_position += CHUNK_SIZE;
@@ -123,7 +123,7 @@ void Decompressor::flush()
 	write(QByteArray(),true);
 	int result = inflateEnd(zlib_stream_);
 	if (result != Z_OK) 
-		qWarning(QString("compressor.c: inflateEnd failed (%1)").arg(result).toAscii());
+		qWarning() << QString("compressor.c: inflateEnd failed (%1)").arg(result).toAscii();
 	
 	flushed_ = true;
 }
@@ -148,7 +148,7 @@ int Decompressor::write(const QByteArray
 		zlib_stream_->next_out = (Bytef*) (output.data() + output_position);
 		result = inflate(zlib_stream_,(flush ? Z_FINISH : Z_NO_FLUSH));
 		if (result == Z_STREAM_ERROR) {
-			qWarning(QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii());
+			qWarning() << QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii();
 			return result;
 		}
 		output_position += CHUNK_SIZE;
@@ -169,7 +169,7 @@ int Decompressor::write(const QByteArray
 			zlib_stream_->next_out = (Bytef*) (output.data() + output_position);
 			result = inflate(zlib_stream_,Z_SYNC_FLUSH);
 			if (result == Z_STREAM_ERROR) {
-				qWarning(QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii());
+				qWarning() << QString("compressor.cpp: Error ('%1')").arg(zlib_stream_->msg).toAscii();
 				return result;
 			}
 			output_position += CHUNK_SIZE;
