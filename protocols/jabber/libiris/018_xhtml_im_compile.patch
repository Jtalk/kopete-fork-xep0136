This is a modification of patch 004 so that it compiles cleanly and applies
to current SVN trunk as of 02/01/2008

Index: iris/include/xmpp_features.h
===================================================================
--- iris/include/xmpp_features.h	(revision 769780)
+++ iris/include/xmpp_features.h	(working copy)
@@ -46,6 +46,7 @@
 		bool canGroupchat() const;
 		bool canVoice() const;
 		bool canDisco() const;
+		bool canXHTML() const;
 		bool canChatState() const;
 		bool canCommand() const;
 		bool isGateway() const;
@@ -60,6 +61,7 @@
 			FID_Disco,
 			FID_Gateway,
 			FID_VCard,
+			FIX_Xhtml,
 			FID_AHCommand,
 
 			// private Psi actions
Index: iris/include/xmpp_message.h
===================================================================
--- iris/include/xmpp_message.h	(revision 769780)
+++ iris/include/xmpp_message.h	(working copy)
@@ -57,6 +57,7 @@
 		QString lang() const;
 		QString subject(const QString &lang="") const;
 		QString body(const QString &lang="") const;
+		QString xHTMLBody(const QString &lang="") const;
 		QString thread() const;
 		Stanza::Error error() const;
 
@@ -67,6 +68,7 @@
 		void setLang(const QString &s);
 		void setSubject(const QString &s, const QString &lang="");
 		void setBody(const QString &s, const QString &lang="");
+		void setXHTMLBody(const QString &s, const QString &lang="", const QString &attr="");
 		void setThread(const QString &s, bool send = false);
 		void setError(const Stanza::Error &err);
 
Index: iris/include/xmpp_clientstream.h
===================================================================
--- iris/include/xmpp_clientstream.h	(revision 769780)
+++ iris/include/xmpp_clientstream.h	(working copy)
@@ -132,6 +132,8 @@
 		// reimplemented
 		QDomDocument & doc() const;
 		QString baseNS() const;
+		QString xhtmlImNS() const;
+		QString xhtmlNS() const;
 		bool old() const;
 
 		void close();
Index: iris/include/xmpp_stream.h
===================================================================
--- iris/include/xmpp_stream.h	(revision 769780)
+++ iris/include/xmpp_stream.h	(working copy)
@@ -53,6 +53,8 @@
 
 		virtual QDomDocument & doc() const=0;
 		virtual QString baseNS() const=0;
+		virtual QString xhtmlImNS() const=0;
+		virtual QString xhtmlNS() const=0;
 		virtual bool old() const=0;
 
 		virtual void close()=0;
Index: iris/include/xmpp_stanza.h
===================================================================
--- iris/include/xmpp_stanza.h	(revision 769780)
+++ iris/include/xmpp_stanza.h	(working copy)
@@ -98,8 +98,11 @@
 
 		QDomDocument & doc() const;
 		QString baseNS() const;
+		QString xhtmlImNS() const;
+		QString xhtmlNS() const;
 		QDomElement createElement(const QString &ns, const QString &tagName);
 		QDomElement createTextElement(const QString &ns, const QString &tagName, const QString &text);
+		QDomElement createXHTMLElement(const QString &xHTML);
 		void appendChild(const QDomElement &e);
 
 		Kind kind() const;
Index: iris/xmpp-im/xmpp_features.cpp
===================================================================
--- iris/xmpp-im/xmpp_features.cpp	(revision 769780)
+++ iris/xmpp-im/xmpp_features.cpp	(working copy)
@@ -110,6 +110,15 @@
 	return test(ns);
 }
 
+#define FID_XHTML "http://jabber.org/protocol/xhtml-im"
+bool Features::canXHTML() const
+{
+	QStringList ns;
+	ns << FID_XHTML;
+	return test(ns);
+}
+
+
 #define FID_GROUPCHAT "jabber:iq:conference"
 bool Features::canGroupchat() const
 {
Index: iris/xmpp-im/types.cpp
===================================================================
--- iris/xmpp-im/types.cpp	(revision 769780)
+++ iris/xmpp-im/types.cpp	(working copy)
@@ -19,6 +19,7 @@
  */
 
 #include "im.h"
+#include "protocol.h"
 #include "xmpp_features.h"
 
 #include <qmap.h>
@@ -890,7 +891,7 @@
 	Jid to, from;
 	QString id, type, lang;
 
-	StringMap subject, body;
+	StringMap subject, body, xHTMLBody;
 	QString thread;
 	bool threadSend;
 	Stanza::Error error;
@@ -1045,6 +1046,11 @@
 	return !(d->htmlElements.isEmpty());
 }
 
+QString Message::xHTMLBody(const QString &lang) const
+{
+	return d->xHTMLBody[lang];
+}
+
 QString Message::thread() const
 {
 	return d->thread;
@@ -1109,6 +1115,14 @@
 	//d->flag = false;
 }
 
+void Message::setXHTMLBody(const QString&s, const QString &lang, const QString &attr)
+{
+	//ugly but needed if s is not a node but a list of leaf
+	
+	QString content = "<body xmlns='" + QString(NS_XHTML) + "' " + attr + ">\n" + s + "\n</body>";
+	d->xHTMLBody[lang] = content;
+}
+
 //! \brief Set xhtml body
 //!
 //! \param s - body node
Index: iris/xmpp-im/xmpp_tasks.cpp
===================================================================
--- iris/xmpp-im/xmpp_tasks.cpp	(revision 769780)
+++ iris/xmpp-im/xmpp_tasks.cpp	(working copy)
@@ -1407,6 +1407,10 @@
 			feature.setAttribute("var", "http://jabber.org/protocol/disco#info");
 			query.appendChild(feature);
 
+			feature = doc()->createElement("feature");
+			feature.setAttribute("var", "http://jabber.org/protocol/xhtml-im");
+			query.appendChild(feature);
+
 			// Client-specific features
 			QStringList clientFeatures = client()->features().list();
 			for (QStringList::ConstIterator i = clientFeatures.begin(); i != clientFeatures.end(); ++i) {
Index: iris/xmpp-core/xmpp_stanza.cpp
===================================================================
--- iris/xmpp-core/xmpp_stanza.cpp	(revision 769780)
+++ iris/xmpp-core/xmpp_stanza.cpp	(working copy)
@@ -541,6 +541,16 @@
 	return d->s->baseNS();
 }
 
+QString Stanza::xhtmlImNS() const
+{
+	return d->s->xhtmlImNS();
+}
+
+QString Stanza::xhtmlNS() const
+{
+	return d->s->xhtmlNS();
+}
+
 QDomElement Stanza::createElement(const QString &ns, const QString &tagName)
 {
 	return d->s->doc().createElementNS(ns, tagName);
@@ -553,6 +563,14 @@
 	return e;
 }
 
+QDomElement Stanza::createXHTMLElement(const QString &xHTML)
+{
+	QDomDocument doc;
+	doc.setContent(xHTML, true);
+	QDomElement root = doc.documentElement();
+	return root;
+}
+
 void Stanza::appendChild(const QDomElement &e)
 {
 	d->e.appendChild(e);
Index: iris/xmpp-core/protocol.h
===================================================================
--- iris/xmpp-core/protocol.h	(revision 769780)
+++ iris/xmpp-core/protocol.h	(working copy)
@@ -39,6 +39,8 @@
 #define NS_BIND     "urn:ietf:params:xml:ns:xmpp-bind"
 #define NS_COMPRESS_FEATURE "http://jabber.org/features/compress"
 #define NS_COMPRESS_PROTOCOL "http://jabber.org/protocol/compress"
+#define NS_XHTML_IM "http://jabber.org/protocol/xhtml-im"
+#define NS_XHTML "http://www.w3.org/1999/xhtml"
 
 namespace XMPP
 {
Index: iris/xmpp-core/stream.cpp
===================================================================
--- iris/xmpp-core/stream.cpp	(revision 769780)
+++ iris/xmpp-core/stream.cpp	(working copy)
@@ -507,6 +507,16 @@
 	return NS_CLIENT;
 }
 
+QString ClientStream::xhtmlImNS() const
+{
+	return NS_XHTML_IM;
+}
+
+QString ClientStream::xhtmlNS() const
+{
+	return NS_XHTML;
+}
+
 void ClientStream::setAllowPlain(AllowPlainType a)
 {
 	d->allowPlain = a;
