Index: src/xmpp/xmpp-im/xmpp_status.h
===================================================================
--- src/xmpp/xmpp-im/xmpp_status.h	(revision 1355305)
+++ src/xmpp/xmpp-im/xmpp_status.h	(working copy)
@@ -58,6 +58,7 @@
 		const QString & capsNode() const;
 		const QString & capsVersion() const;
 		const QString & capsExt() const;
+		const QString & capsHash() const;
 		
 		bool isMUC() const;
 		bool hasMUCItem() const;
@@ -84,6 +85,7 @@
 		void setCapsNode(const QString&);
 		void setCapsVersion(const QString&);
 		void setCapsExt(const QString&);
+		void setCapsHash(const QString&);
 		
 		void setMUC();
 		void setMUCItem(const MUCItem&);
@@ -116,7 +118,7 @@
 		QString v_xsigned;
 		// gabber song extension
 		QString v_songTitle;
-		QString v_capsNode, v_capsVersion, v_capsExt;
+		QString v_capsNode, v_capsVersion, v_capsExt, v_capsHash;
 		QList<BoBData> v_bobDataList;
 
 		// MUC
Index: src/xmpp/xmpp-im/types.cpp
===================================================================
--- src/xmpp/xmpp-im/types.cpp	(revision 1355305)
+++ src/xmpp/xmpp-im/types.cpp	(working copy)
@@ -2302,6 +2302,11 @@
 	v_capsExt = _capsExt;
 }
 
+void Status::setCapsHash(const QString & _capsHash)
+{
+	v_capsHash = _capsHash;
+}
+
 void Status::setMUC() 
 {
 	v_isMUC = true;
@@ -2456,6 +2461,11 @@
 	return v_capsExt;
 }
 
+const QString & Status::capsHash() const
+{
+	return v_capsHash;
+}
+
 bool Status::isMUC() const
 {
 	return v_isMUC || !v_mucPassword.isEmpty() || hasMUCHistory();
Index: src/xmpp/xmpp-im/xmpp_tasks.cpp
===================================================================
--- src/xmpp/xmpp-im/xmpp_tasks.cpp	(revision 1355305)
+++ src/xmpp/xmpp-im/xmpp_tasks.cpp	(working copy)
@@ -589,6 +589,8 @@
 			c.setAttribute("ver",s.capsVersion());
 			if (!s.capsExt().isEmpty()) 
 				c.setAttribute("ext",s.capsExt());
+			if (!s.capsHash().isEmpty())
+				c.setAttribute("hash",s.capsHash());
 			tag.appendChild(c);
 		}
 
@@ -759,6 +761,7 @@
  			p.setCapsNode(i.attribute("node"));
  			p.setCapsVersion(i.attribute("ver"));
  			p.setCapsExt(i.attribute("ext"));
+			p.setCapsHash(i.attribute("hash"));
   		}
 		else if(i.tagName() == "x" && i.attribute("xmlns") == "vcard-temp:x:update") {
 			QDomElement t;
Index: src/xmpp/xmpp-im/client.cpp
===================================================================
--- src/xmpp/xmpp-im/client.cpp	(revision 1355305)
+++ src/xmpp/xmpp-im/client.cpp	(working copy)
@@ -129,7 +129,7 @@
 	int id_seed;
 	Task *root;
 	QString host, user, pass, resource;
-	QString osname, tzname, clientName, clientVersion, capsNode, capsVersion, capsExt;
+	QString osname, tzname, clientName, clientVersion, capsNode, capsVersion, capsExt, capsHash;
 	DiscoItem::Identity identity;
 	Features features;
 	QMap<QString,Features> extension_features;
@@ -161,6 +161,7 @@
 	d->capsNode = "";
 	d->capsVersion = "";
 	d->capsExt = "";
+	d->capsHash = "";
 
 	d->id_seed = 0xaaaa;
 	d->root = new Task(this, true);
@@ -1064,6 +1065,11 @@
 	return d->capsExt;
 }
 
+QString Client::capsHash() const
+{
+	return d->capsHash;
+}
+
 void Client::setOSName(const QString &name)
 {
 	d->osname = name;
@@ -1096,6 +1102,11 @@
 	d->capsVersion = s;
 }
 
+void Client::setCapsHash(const QString &s)
+{
+	d->capsHash = s;
+}
+
 DiscoItem::Identity Client::identity()
 {
 	return d->identity;
Index: src/xmpp/xmpp-im/xmpp_client.h
===================================================================
--- src/xmpp/xmpp-im/xmpp_client.h	(revision 1355305)
+++ src/xmpp/xmpp-im/xmpp_client.h	(working copy)
@@ -98,6 +98,7 @@
 		QString capsNode() const;
 		QString capsVersion() const;
 		QString capsExt() const;
+		QString capsHash() const;
 
 		void setOSName(const QString &);
 		void setTimeZone(const QString &, int);
@@ -105,6 +106,7 @@
 		void setClientVersion(const QString &);
 		void setCapsNode(const QString &);
 		void setCapsVersion(const QString &);
+		void setCapsHash(const QString &);
 
 		void setIdentity(DiscoItem::Identity);
 		DiscoItem::Identity identity();
