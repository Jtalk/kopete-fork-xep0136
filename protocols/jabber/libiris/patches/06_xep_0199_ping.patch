Index: src/xmpp/xmpp-im/client.cpp
===================================================================
--- src/xmpp/xmpp-im/client.cpp	(revision 1355998)
+++ src/xmpp/xmpp-im/client.cpp	(working copy)
@@ -226,6 +226,7 @@
 	connect(pr, SIGNAL(roster(const Roster &)), SLOT(prRoster(const Roster &)));
 
 	new JT_ServInfo(rootTask());
+	new JT_PongServer(rootTask());
 
 	d->active = true;
 }
Index: src/xmpp/xmpp-im/xmpp_tasks.h
===================================================================
--- src/xmpp/xmpp-im/xmpp_tasks.h	(revision 1355998)
+++ src/xmpp/xmpp-im/xmpp_tasks.h	(working copy)
@@ -447,6 +447,14 @@
 		class Private;
 		Private *d;
 	};
+
+	class JT_PongServer : public Task
+	{
+		Q_OBJECT
+	public:
+		JT_PongServer(Task *);
+		bool take(const QDomElement &);
+	};
 }
 
 #endif
Index: src/xmpp/xmpp-im/xmpp_tasks.cpp
===================================================================
--- src/xmpp/xmpp-im/xmpp_tasks.cpp	(revision 1355998)
+++ src/xmpp/xmpp-im/xmpp_tasks.cpp	(working copy)
@@ -1501,6 +1501,10 @@
 			feature.setAttribute("var", "urn:xmpp:bob");
 			query.appendChild(feature);
 
+			feature = doc()->createElement("feature");
+			feature.setAttribute("var", "urn:xmpp:ping");
+			query.appendChild(feature);
+
 			// Client-specific features
 			QStringList clientFeatures = client()->features().list();
 			for (QStringList::ConstIterator i = clientFeatures.begin(); i != clientFeatures.end(); ++i) {
@@ -2068,3 +2072,32 @@
 {
 	return d->data;
 }
+
+//----------------------------------------------------------------------------
+// JT_PongServer
+//----------------------------------------------------------------------------
+/**
+ * \class JT_PongServer
+ * \brief Answers XMPP Pings
+ */
+
+JT_PongServer::JT_PongServer(Task *parent)
+:Task(parent)
+{
+
+}
+
+bool JT_PongServer::take(const QDomElement &e)
+{
+	if (e.tagName() != "iq" || e.attribute("type") != "get")
+		return false;
+
+	bool found = false;
+	QDomElement ping = findSubTag(e, "ping", &found);
+	if (found && ping.attribute("xmlns") == "urn:xmpp:ping") {
+		QDomElement iq = createIQ(doc(), "result", e.attribute("from"), e.attribute("id"));
+		send(iq);
+		return true;
+	}
+	return false;
+}
