Index: src/irisnet/noncore/cutestuff/socks.cpp
===================================================================
--- src/irisnet/noncore/cutestuff/socks.cpp	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/socks.cpp	(working copy)
@@ -462,12 +462,12 @@
 	connect(&d->sock, SIGNAL(bytesWritten(qint64)), SLOT(sock_bytesWritten(qint64)));
 	connect(&d->sock, SIGNAL(error(int)), SLOT(sock_error(int)));
 
-	reset(true);
+	resetConnection(true);
 }
 
 SocksClient::~SocksClient()
 {
-	reset(true);
+	resetConnection(true);
 	delete d;
 }
 
@@ -476,7 +476,7 @@
 	return d->sock.abstractSocket();
 }
 
-void SocksClient::reset(bool clear)
+void SocksClient::resetConnection(bool clear)
 {
 	if(d->sock.state() != BSocket::Idle)
 		d->sock.close();
@@ -506,7 +506,7 @@
 
 void SocksClient::connectToHost(const QString &proxyHost, int proxyPort, const QString &host, int port, bool udpMode)
 {
-	reset(true);
+	resetConnection(true);
 
 	d->host = proxyHost;
 	d->port = proxyPort;
@@ -528,7 +528,7 @@
 {
 	d->sock.close();
 	if(d->sock.bytesToWrite() == 0)
-		reset();
+		resetConnection();
 }
 
 void SocksClient::writeData(const QByteArray &buf)
@@ -586,7 +586,7 @@
 void SocksClient::sock_connectionClosed()
 {
 	if(isOpen()) {
-		reset();
+		resetConnection();
 		emit connectionClosed();
 	}
 	else {
@@ -597,7 +597,7 @@
 void SocksClient::sock_delayedCloseFinished()
 {
 	if(isOpen()) {
-		reset();
+		resetConnection();
 		delayedCloseFinished();
 	}
 }
@@ -637,7 +637,7 @@
 		SPSS_VERSION s;
 		int r = sps_get_version(d->recvBuf, &s);
 		if(r == -1) {
-			reset(true);
+			resetConnection(true);
 			setError(ErrProxyNeg);
 			return;
 		}
@@ -646,7 +646,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "SocksClient: Method selection failed\n");
 #endif
-				reset(true);
+				resetConnection(true);
 				setError(ErrProxyNeg);
 				return;
 			}
@@ -664,7 +664,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "SocksClient: Server wants to use unknown method '%02x'\n", s.method);
 #endif
-				reset(true);
+				resetConnection(true);
 				setError(ErrProxyNeg);
 				return;
 			}
@@ -687,18 +687,18 @@
 			SPSS_AUTHUSERNAME s;
 			int r = sps_get_authUsername(d->recvBuf, &s);
 			if(r == -1) {
-				reset(true);
+				resetConnection(true);
 				setError(ErrProxyNeg);
 				return;
 			}
 			else if(r == 1) {
 				if(s.version != 0x01) {
-					reset(true);
+					resetConnection(true);
 					setError(ErrProxyNeg);
 					return;
 				}
 				if(!s.success) {
-					reset(true);
+					resetConnection(true);
 					setError(ErrProxyAuth);
 					return;
 				}
@@ -711,7 +711,7 @@
 		SPS_CONNREQ s;
 		int r = sp_get_request(d->recvBuf, &s);
 		if(r == -1) {
-			reset(true);
+			resetConnection(true);
 			setError(ErrProxyNeg);
 			return;
 		}
@@ -720,7 +720,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "SocksClient: client << Error >> [%02x]\n", s.cmd);
 #endif
-				reset(true);
+				resetConnection(true);
 				if(s.cmd == RET_UNREACHABLE)
 					setError(ErrHostNotFound);
 				else if(s.cmd == RET_CONNREFUSED)
@@ -791,11 +791,11 @@
 void SocksClient::sock_error(int x)
 {
 	if(isOpen()) {
-		reset();
+		resetConnection();
 		setError(ErrRead);
 	}
 	else {
-		reset(true);
+		resetConnection(true);
 		if(x == BSocket::ErrHostNotFound)
 			setError(ErrProxyConnect);
 		else if(x == BSocket::ErrConnectionRefused)
@@ -836,13 +836,13 @@
 		SPCS_VERSION s;
 		int r = spc_get_version(d->recvBuf, &s);
 		if(r == -1) {
-			reset(true);
+			resetConnection(true);
 			setError(ErrProxyNeg);
 			return;
 		}
 		else if(r == 1) {
 			if(s.version != 0x05) {
-				reset(true);
+				resetConnection(true);
 				setError(ErrProxyNeg);
 				return;
 			}
@@ -863,7 +863,7 @@
 		SPCS_AUTHUSERNAME s;
 		int r = spc_get_authUsername(d->recvBuf, &s);
 		if(r == -1) {
-			reset(true);
+			resetConnection(true);
 			setError(ErrProxyNeg);
 			return;
 		}
@@ -876,7 +876,7 @@
 		SPS_CONNREQ s;
 		int r = sp_get_request(d->recvBuf, &s);
 		if(r == -1) {
-			reset(true);
+			resetConnection(true);
 			setError(ErrProxyNeg);
 			return;
 		}
@@ -934,7 +934,7 @@
 	d->waiting = false;
 	writeData(sps_set_authUsername(b));
 	if(!b) {
-		reset(true);
+		resetConnection(true);
 		return;
 	}
 	continueIncoming();
@@ -948,7 +948,7 @@
 	// response
 	d->waiting = false;
 	writeData(sp_set_request(d->rhost, d->rport, RET_UNREACHABLE));
-	reset(true);
+	resetConnection(true);
 }
 
 void SocksClient::grantConnect()
Index: src/irisnet/noncore/cutestuff/socks.h
===================================================================
--- src/irisnet/noncore/cutestuff/socks.h	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/socks.h	(working copy)
@@ -120,7 +120,7 @@
 	Private *d;
 
 	void init();
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 	void do_request();
 	void processOutgoing(const QByteArray &);
 	void processIncoming(const QByteArray &);
Index: src/irisnet/noncore/cutestuff/httpconnect.cpp
===================================================================
--- src/irisnet/noncore/cutestuff/httpconnect.cpp	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/httpconnect.cpp	(working copy)
@@ -128,16 +128,16 @@
 	connect(&d->sock, SIGNAL(bytesWritten(qint64)), SLOT(sock_bytesWritten(qint64)));
 	connect(&d->sock, SIGNAL(error(int)), SLOT(sock_error(int)));
 
-	reset(true);
+	resetConnection(true);
 }
 
 HttpConnect::~HttpConnect()
 {
-	reset(true);
+	resetConnection(true);
 	delete d;
 }
 
-void HttpConnect::reset(bool clear)
+void HttpConnect::resetConnection(bool clear)
 {
 	if(d->sock.state() != BSocket::Idle)
 		d->sock.close();
@@ -157,7 +157,7 @@
 
 void HttpConnect::connectToHost(const QString &proxyHost, int proxyPort, const QString &host, int port)
 {
-	reset(true);
+	resetConnection(true);
 
 	d->host = proxyHost;
 	d->port = proxyPort;
@@ -178,7 +178,7 @@
 {
 	d->sock.close();
 	if(d->sock.bytesToWrite() == 0)
-		reset();
+		resetConnection();
 }
 
 qint64 HttpConnect::writeData(const char *data, qint64 maxSize)
@@ -225,7 +225,7 @@
 void HttpConnect::sock_connectionClosed()
 {
 	if(d->active) {
-		reset();
+		resetConnection();
 		connectionClosed();
 	}
 	else {
@@ -236,7 +236,7 @@
 void HttpConnect::sock_delayedCloseFinished()
 {
 	if(d->active) {
-		reset();
+		resetConnection();
 		delayedCloseFinished();
 	}
 }
@@ -274,7 +274,7 @@
 #ifdef PROX_DEBUG
 					fprintf(stderr, "HttpConnect: invalid header!\n");
 #endif
-					reset(true);
+					resetConnection(true);
 					setError(ErrProxyNeg);
 					return;
 				}
@@ -328,7 +328,7 @@
 #ifdef PROX_DEBUG
 					fprintf(stderr, "HttpConnect: << Error >> [%s]\n", qPrintable(errStr));
 #endif
-					reset(true);
+					resetConnection(true);
 					setError(err);
 					return;
 				}
@@ -359,11 +359,11 @@
 void HttpConnect::sock_error(int x)
 {
 	if(d->active) {
-		reset();
+		resetConnection();
 		setError(ErrRead);
 	}
 	else {
-		reset(true);
+		resetConnection(true);
 		if(x == BSocket::ErrHostNotFound)
 			setError(ErrProxyConnect);
 		else if(x == BSocket::ErrConnectionRefused)
Index: src/irisnet/noncore/cutestuff/bsocket.cpp
===================================================================
--- src/irisnet/noncore/cutestuff/bsocket.cpp	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/bsocket.cpp	(working copy)
@@ -131,12 +131,12 @@
 :ByteStream(parent)
 {
 	d = new Private;
-	reset();
+	resetConnection();
 }
 
 BSocket::~BSocket()
 {
-	reset(true);
+	resetConnection(true);
 	delete d;
 }
 
@@ -154,7 +154,7 @@
 	d->resolver = new XMPP::ServiceResolver;
 }
 
-void BSocket::reset(bool clear)
+void BSocket::resetConnection(bool clear)
 {
 #ifdef BS_DEBUG
 	BSDEBUG << clear;
@@ -213,7 +213,7 @@
 	BSDEBUG << "a:" << address << "p:" << port;
 #endif
 
-	reset(true);
+	resetConnection(true);
 	d->address = address;
 	d->port = port;
 	d->state = Connecting;
@@ -229,7 +229,7 @@
 	BSDEBUG << "h:" << host << "p:" << port << "pr:" << protocol;
 #endif
 
-	reset(true);
+	resetConnection(true);
 	d->host = host;
 	d->port = port;
 	d->state = HostLookup;
@@ -261,7 +261,7 @@
 	BSDEBUG << "s:" << service << "t:" << transport << "d:" << domain;
 #endif
 
-	reset(true);
+	resetConnection(true);
 	d->domain = domain;
 	d->state = HostLookup;
 
@@ -322,7 +322,7 @@
 
 void BSocket::setSocket(int s)
 {
-	reset(true);
+	resetConnection(true);
 	ensureSocket();
 	d->state = Connected;
 	setOpenMode(QIODevice::ReadWrite);
@@ -356,10 +356,10 @@
 		d->qsock->close();
 		d->state = Closing;
 		if(d->qsock->bytesToWrite() == 0)
-			reset();
+			resetConnection();
 	}
 	else {
-		reset();
+		resetConnection();
 	}
 }
 
@@ -463,7 +463,7 @@
 		BSDEBUG << "Delayed Close Finished";
 #endif
 		//SafeDeleteLock s(&d->sd);
-		reset();
+		resetConnection();
 		emit delayedCloseFinished();
 	}
 }
@@ -498,7 +498,7 @@
 		BSDEBUG << "Connection Closed";
 #endif
 		//SafeDeleteLock s(&d->sd);
-		reset();
+		resetConnection();
 		emit connectionClosed();
 		return;
 	}
@@ -508,7 +508,7 @@
 #endif
 	//SafeDeleteLock s(&d->sd);
 
-	reset();
+	resetConnection();
 	if(x == QTcpSocket::ConnectionRefusedError)
 		emit error(ErrConnectionRefused);
 	else if(x == QTcpSocket::HostNotFoundError)
Index: src/irisnet/noncore/cutestuff/httpconnect.h
===================================================================
--- src/irisnet/noncore/cutestuff/httpconnect.h	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/httpconnect.h	(working copy)
@@ -57,7 +57,7 @@
 	class Private;
 	Private *d;
 
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 };
 
 // CS_NAMESPACE_END
Index: src/irisnet/noncore/cutestuff/bsocket.h
===================================================================
--- src/irisnet/noncore/cutestuff/bsocket.h	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/bsocket.h	(working copy)
@@ -99,7 +99,7 @@
 	class Private;
 	Private *d;
 
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 	void ensureSocket();
 	void recreate_resolver();
 	bool check_protocol_fallback();
Index: src/irisnet/noncore/cutestuff/httppoll.cpp
===================================================================
--- src/irisnet/noncore/cutestuff/httppoll.cpp	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/httppoll.cpp	(working copy)
@@ -99,12 +99,12 @@
 	connect(&d->http, SIGNAL(result()), SLOT(http_result()));
 	connect(&d->http, SIGNAL(error(int)), SLOT(http_error(int)));
 
-	reset(true);
+	resetConnection(true);
 }
 
 HttpPoll::~HttpPoll()
 {
-	reset(true);
+	resetConnection(true);
 	delete d->t;
 	delete d;
 }
@@ -114,7 +114,7 @@
 	return d->http.abstractSocket();
 }
 
-void HttpPoll::reset(bool clear)
+void HttpPoll::resetConnection(bool clear)
 {
 	if(d->http.isActive())
 		d->http.stop();
@@ -140,7 +140,7 @@
 
 void HttpPoll::connectToHost(const QString &proxyHost, int proxyPort, const QUrl &url)
 {
-	reset(true);
+	resetConnection(true);
 
 	bool useSsl = false;
 	d->port = 80;
@@ -232,7 +232,7 @@
 		return;
 
 	if(bytesToWrite() == 0)
-		reset();
+		resetConnection();
 	else
 		d->closing = true;
 }
@@ -250,7 +250,7 @@
 	QString cookie = d->http.getHeader("Set-Cookie");
 	int n = cookie.indexOf("ID=");
 	if(n == -1) {
-		reset();
+		resetConnection();
 		setError(ErrRead);
 		return;
 	}
@@ -265,12 +265,12 @@
 	// session error?
 	if(id.right(2) == ":0") {
 		if(id == "0:0" && d->state == 2) {
-			reset();
+			resetConnection();
 			connectionClosed();
 			return;
 		}
 		else {
-			reset();
+			resetConnection();
 			setError(ErrRead);
 			return;
 		}
@@ -317,7 +317,7 @@
 	}
 	else {
 		if(d->closing) {
-			reset();
+			resetConnection();
 			delayedCloseFinished();
 			return;
 		}
@@ -326,7 +326,7 @@
 
 void HttpPoll::http_error(int x)
 {
-	reset();
+	resetConnection();
 	if(x == HttpProxyPost::ErrConnectionRefused)
 		setError(ErrConnectionRefused);
 	else if(x == HttpProxyPost::ErrHostNotFound)
@@ -478,12 +478,12 @@
 	connect(&d->sock, SIGNAL(connectionClosed()), SLOT(sock_connectionClosed()));
 	connect(&d->sock, SIGNAL(readyRead()), SLOT(sock_readyRead()));
 	connect(&d->sock, SIGNAL(error(int)), SLOT(sock_error(int)));
-	reset(true);
+	resetConnection(true);
 }
 
 HttpProxyPost::~HttpProxyPost()
 {
-	reset(true);
+	resetConnection(true);
 	delete d;
 }
 
@@ -497,7 +497,7 @@
 	return d->sock.abstractSocket();
 }
 
-void HttpProxyPost::reset(bool clear)
+void HttpProxyPost::resetConnection(bool clear)
 {
 	if(d->sock.state() != BSocket::Idle)
 		d->sock.close();
@@ -519,7 +519,7 @@
 
 void HttpProxyPost::post(const QString &proxyHost, int proxyPort, const QUrl &url, const QByteArray &data, bool asProxy)
 {
-	reset(true);
+	resetConnection(true);
 
 	d->host = proxyHost;
 	d->url = url;
@@ -544,7 +544,7 @@
 
 void HttpProxyPost::stop()
 {
-	reset();
+	resetConnection();
 }
 
 QByteArray HttpProxyPost::body() const
@@ -621,7 +621,7 @@
 void HttpProxyPost::sock_connectionClosed()
 {
 	d->body = d->recvBuf;
-	reset();
+	resetConnection();
 	result();
 }
 
@@ -642,7 +642,7 @@
 #ifdef PROX_DEBUG
 	fprintf(stderr, "HttpProxyGetStream: ssl error: %d\n", d->tls->errorCode());
 #endif
-	reset(true);
+	resetConnection(true);
 	error(ErrConnectionRefused); // FIXME: bogus error
 }
 
@@ -685,7 +685,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "HttpProxyPost: invalid header!\n");
 #endif
-				reset(true);
+				resetConnection(true);
 				error(ErrProxyNeg);
 				return;
 			}
@@ -729,7 +729,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "HttpProxyPost: << Error >> [%s]\n", errStr.latin1());
 #endif
-				reset(true);
+				resetConnection(true);
 				error(err);
 				return;
 			}
@@ -742,7 +742,7 @@
 #ifdef PROX_DEBUG
 	fprintf(stderr, "HttpProxyPost: socket error: %d\n", x);
 #endif
-	reset(true);
+	resetConnection(true);
 	if(x == BSocket::ErrHostNotFound)
 		error(ErrProxyConnect);
 	else if(x == BSocket::ErrConnectionRefused)
@@ -785,16 +785,16 @@
 	connect(&d->sock, SIGNAL(connectionClosed()), SLOT(sock_connectionClosed()));
 	connect(&d->sock, SIGNAL(readyRead()), SLOT(sock_readyRead()));
 	connect(&d->sock, SIGNAL(error(int)), SLOT(sock_error(int)));
-	reset(true);
+	resetConnection(true);
 }
 
 HttpProxyGetStream::~HttpProxyGetStream()
 {
-	reset(true);
+	resetConnection(true);
 	delete d;
 }
 
-void HttpProxyGetStream::reset(bool /*clear*/)
+void HttpProxyGetStream::resetConnection(bool /*clear*/)
 {
 	if(d->tls) {
 		delete d->tls;
@@ -821,7 +821,7 @@
 
 void HttpProxyGetStream::get(const QString &proxyHost, int proxyPort, const QString &url, bool ssl, bool asProxy)
 {
-	reset(true);
+	resetConnection(true);
 
 	d->host = proxyHost;
 	d->url = url;
@@ -840,7 +840,7 @@
 
 void HttpProxyGetStream::stop()
 {
-	reset();
+	resetConnection();
 }
 
 QString HttpProxyGetStream::getHeader(const QString &var) const
@@ -906,7 +906,7 @@
 void HttpProxyGetStream::sock_connectionClosed()
 {
 	//d->body = d->recvBuf;
-	reset();
+	resetConnection();
 	emit finished();
 }
 
@@ -958,7 +958,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "HttpProxyGetStream: invalid header!\n");
 #endif
-				reset(true);
+				resetConnection(true);
 				error(ErrProxyNeg);
 				return;
 			}
@@ -1012,7 +1012,7 @@
 #ifdef PROX_DEBUG
 				fprintf(stderr, "HttpProxyGetStream: << Error >> [%s]\n", errStr.latin1());
 #endif
-				reset(true);
+				resetConnection(true);
 				error(err);
 				return;
 			}
@@ -1031,7 +1031,7 @@
 #ifdef PROX_DEBUG
 	fprintf(stderr, "HttpProxyGetStream: socket error: %d\n", x);
 #endif
-	reset(true);
+	resetConnection(true);
 	if(x == BSocket::ErrHostNotFound)
 		error(ErrProxyConnect);
 	else if(x == BSocket::ErrConnectionRefused)
@@ -1057,7 +1057,7 @@
 #ifdef PROX_DEBUG
 	fprintf(stderr, "HttpProxyGetStream: ssl error: %d\n", d->tls->errorCode());
 #endif
-	reset(true);
+	resetConnection(true);
 	error(ErrConnectionRefused); // FIXME: bogus error
 }
 
Index: src/irisnet/noncore/cutestuff/httppoll.h
===================================================================
--- src/irisnet/noncore/cutestuff/httppoll.h	(revision 1356863)
+++ src/irisnet/noncore/cutestuff/httppoll.h	(working copy)
@@ -65,7 +65,7 @@
 	class Private;
 	Private *d;
 
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 	QByteArray makePacket(const QString &ident, const QString &key, const QString &newkey, const QByteArray &block);
 	void resetKey();
 	const QString & getKey(bool *);
@@ -106,7 +106,7 @@
 	class Private;
 	Private *d;
 
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 	void processData(const QByteArray &block);
 };
 
@@ -145,7 +145,7 @@
 	class Private;
 	Private *d;
 
-	void reset(bool clear=false);
+	void resetConnection(bool clear=false);
 	void processData(const QByteArray &block);
 };
 
Index: src/xmpp/xmpp-im/xmpp_ibb.h
===================================================================
--- src/xmpp/xmpp-im/xmpp_ibb.h	(revision 1356863)
+++ src/xmpp/xmpp-im/xmpp_ibb.h	(working copy)
@@ -88,7 +88,7 @@
 		class Private;
 		Private *d;
 
-		void reset(bool clear=false);
+		void resetConnection(bool clear=false);
 
 		friend class IBBManager;
 		void waitForAccept(const Jid &peer, const QString &iq_id,
Index: src/xmpp/xmpp-im/s5b.h
===================================================================
--- src/xmpp/xmpp-im/s5b.h	(revision 1356863)
+++ src/xmpp/xmpp-im/s5b.h	(working copy)
@@ -123,7 +123,7 @@
 		class Private;
 		Private *d;
 
-		void reset(bool clear=false);
+		void resetConnection(bool clear=false);
 		void handleUDP(const QByteArray &buf);
 		void sendUDP(const QByteArray &buf);
 
@@ -211,7 +211,7 @@
 		S5BConnector(QObject *parent=0);
 		~S5BConnector();
 
-		void reset();
+		void resetConnection();
 		void start(const Jid &self, const StreamHostList &hosts, const QString &key, bool udp, int timeout);
 		SocksClient *takeClient();
 		SocksUDP *takeUDP();
Index: src/xmpp/xmpp-im/s5b.cpp
===================================================================
--- src/xmpp/xmpp-im/s5b.cpp	(revision 1356863)
+++ src/xmpp/xmpp-im/s5b.cpp	(working copy)
@@ -94,7 +94,7 @@
 	Item(S5BManager *manager);
 	~Item();
 
-	void reset();
+	void resetConnection();
 	void startRequester(const QString &_sid, const Jid &_self, const Jid &_peer, bool fast, bool udp);
 	void startTarget(const QString &_sid, const Jid &_self, const Jid &_peer,
 					 const QString &_dstaddr, const StreamHostList &hosts,
@@ -201,12 +201,12 @@
 	qDebug("S5BConnection[%d]: constructing, count=%d, %p\n", d->id, num_conn, this);
 #endif
 
-	reset();
+	resetConnection();
 }
 
 S5BConnection::~S5BConnection()
 {
-	reset(true);
+	resetConnection(true);
 
 	--num_conn;
 #ifdef S5B_DEBUG
@@ -216,7 +216,7 @@
 	delete d;
 }
 
-void S5BConnection::reset(bool clear)
+void S5BConnection::resetConnection(bool clear)
 {
 	d->m->con_unlink(this);
 	if(clear && d->sc) {
@@ -252,7 +252,7 @@
 
 void S5BConnection::connectToJid(const Jid &peer, const QString &sid, Mode m)
 {
-	reset(true);
+	resetConnection(true);
 	if(!d->m->isAcceptableSID(peer, sid))
 		return;
 
@@ -290,7 +290,7 @@
 #ifdef S5B_DEBUG
 	qDebug("S5BConnection[%d]: closing %s [%s]\n", d->id, qPrintable(d->peer.full()), qPrintable(d->sid));
 #endif
-	reset();
+	resetConnection();
 }
 
 Jid S5BConnection::peer() const
@@ -449,7 +449,7 @@
 
 void S5BConnection::man_failed(int x)
 {
-	reset(true);
+	resetConnection(true);
 	if(x == S5BManager::Item::ErrRefused)
 		setError(ErrRefused);
 	if(x == S5BManager::Item::ErrConnect)
@@ -471,7 +471,7 @@
 		return;
 	}
 	d->notifyClose = false;
-	reset();
+	resetConnection();
 	connectionClosed();
 }
 
@@ -502,7 +502,7 @@
 
 void S5BConnection::sc_error(int)
 {
-	reset();
+	resetConnection();
 	setError(ErrSocket);
 }
 
@@ -1102,15 +1102,15 @@
 	client = 0;
 	client_out_udp = 0;
 	client_out = 0;
-	reset();
+	resetConnection();
 }
 
 S5BManager::Item::~Item()
 {
-	reset();
+	resetConnection();
 }
 
-void S5BManager::Item::reset()
+void S5BManager::Item::resetConnection()
 {
 	delete task;
 	task = 0;
@@ -1365,7 +1365,7 @@
 #ifdef S5B_DEBUG
 				qDebug("S5BManager::Item %s claims to have connected to us, but we don't see this\n", qPrintable(peer.full()));
 #endif
-				reset();
+				resetConnection();
 				error(ErrWrongHost);
 			}
 		}
@@ -1395,7 +1395,7 @@
 #ifdef S5B_DEBUG
 			qDebug("S5BManager::Item %s claims to have connected to a streamhost we never offered\n", qPrintable(peer.full()));
 #endif
-			reset();
+			resetConnection();
 			error(ErrWrongHost);
 		}
 	}
@@ -1505,7 +1505,7 @@
 	else {
 		delete proxy_conn;
 		proxy_conn = 0;
-		reset();
+		resetConnection();
 		error(ErrProxy);
 	}
 }
@@ -1527,7 +1527,7 @@
 			checkForActivation();
 	}
 	else {
-		reset();
+		resetConnection();
 		error(ErrProxy);
 	}
 }
@@ -1556,7 +1556,7 @@
 #ifdef S5B_DEBUG
 	qDebug("sc_error\n");
 #endif
-	reset();
+	resetConnection();
 	error(ErrConnect);
 }
 
@@ -1713,14 +1713,14 @@
 
 	if(failed) {
 		if(state == Requester) {
-			reset();
+			resetConnection();
 			if(statusCode == 404)
 				error(ErrConnect);
 			else
 				error(ErrRefused);
 		}
 		else {
-			reset();
+			resetConnection();
 			error(ErrConnect);
 		}
 	}
@@ -1866,11 +1866,11 @@
 
 S5BConnector::~S5BConnector()
 {
-	reset();
+	resetConnection();
 	delete d;
 }
 
-void S5BConnector::reset()
+void S5BConnector::resetConnection()
 {
 	d->t.stop();
 	delete d->active_udp;
@@ -1884,7 +1884,7 @@
 
 void S5BConnector::start(const Jid &self, const StreamHostList &hosts, const QString &key, bool udp, int timeout)
 {
-	reset();
+	resetConnection();
 
 #ifdef S5B_DEBUG
 	qDebug("S5BConnector: starting [%p]!\n", this);
@@ -1950,7 +1950,7 @@
 
 void S5BConnector::t_timeout()
 {
-	reset();
+	resetConnection();
 #ifdef S5B_DEBUG
 	qDebug("S5BConnector: failed! (timeout)\n");
 #endif
Index: src/xmpp/xmpp-im/xmpp_ibb.cpp
===================================================================
--- src/xmpp/xmpp-im/xmpp_ibb.cpp	(revision 1356863)
+++ src/xmpp/xmpp-im/xmpp_ibb.cpp	(working copy)
@@ -66,7 +66,7 @@
 	d->m = m;
 	d->j = 0;
 	d->blockSize = IBB_PACKET_SIZE;
-	reset();
+	resetConnection();
 
 	++num_conn;
 	d->id = id_conn++;
@@ -75,7 +75,7 @@
 #endif
 }
 
-void IBBConnection::reset(bool clear)
+void IBBConnection::resetConnection(bool clear)
 {
 	d->m->unlink(this);
 	d->state = Idle;
@@ -108,7 +108,7 @@
 void IBBConnection::connectToJid(const Jid &peer, const QString &sid)
 {
 	close();
-	reset(true);
+	resetConnection(true);
 
 	d->state = Requesting;
 	d->peer = peer;
@@ -149,7 +149,7 @@
 
 	if(d->state == WaitingForAccept) {
 		d->m->doReject(this, d->iq_id, Stanza::Error::Forbidden, "Rejected");
-		reset();
+		resetConnection();
 		return;
 	}
 
@@ -167,7 +167,7 @@
 		}
 	}
 
-	reset();
+	resetConnection();
 }
 
 int IBBConnection::state() const
@@ -215,7 +215,7 @@
 								  const QString &stanza)
 {
 	close();
-	reset(true);
+	resetConnection(true);
 
 	d->state = WaitingForAccept;
 	d->peer = peer;
@@ -244,7 +244,7 @@
 
 void IBBConnection::setRemoteClosed()
 {
-	reset();
+	resetConnection();
 	emit connectionClosed();
 }
 
@@ -267,7 +267,7 @@
 		}
 		else {
 			if(d->closing) {
-				reset();
+				resetConnection();
 				emit delayedCloseFinished();
 			}
 
@@ -282,11 +282,11 @@
 #ifdef IBB_DEBUG
 			qDebug("IBBConnection[%d]: %s refused.", d->id, qPrintable(d->peer.full()));
 #endif
-			reset(true);
+			resetConnection(true);
 			setError(ErrRequest);
 		}
 		else {
-			reset(true);
+			resetConnection(true);
 			setError(ErrData);
 		}
 	}
