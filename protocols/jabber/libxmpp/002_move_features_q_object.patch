diff -u /home/till/kde/libxmpp/xmpp/src/xmpp_types.cpp ./xmpp_types.cpp
--- /home/till/kde/libxmpp/xmpp/src/xmpp_types.cpp	2003-06-18 19:39:48.000000000 +0200
+++ ./xmpp_types.cpp	2003-08-26 21:01:32.000000000 +0200
@@ -769,7 +769,7 @@
 	return false;
 }
 
-#define FID_REGISTER "jabber:iq:register"
+//#define FID_REGISTER "jabber:iq:register"
 bool Features::canRegister() const
 {
 	QStringList ns;
@@ -778,7 +778,7 @@
 	return test(ns);
 }
 
-#define FID_SEARCH "jabber:iq:search"
+//#define FID_SEARCH "jabber:iq:search"
 bool Features::canSearch() const
 {
 	QStringList ns;
@@ -787,7 +787,7 @@
 	return test(ns);
 }
 
-#define FID_GROUPCHAT "jabber:iq:conference"
+//#define FID_GROUPCHAT "jabber:iq:conference"
 bool Features::canGroupchat() const
 {
 	QStringList ns;
@@ -797,7 +797,7 @@
 	return test(ns);
 }
 
-#define FID_GATEWAY "jabber:iq:gateway"
+//#define FID_GATEWAY "jabber:iq:gateway"
 bool Features::isGateway() const
 {
 	QStringList ns;
@@ -806,7 +806,7 @@
 	return test(ns);
 }
 
-#define FID_DISCO "http://jabber.org/protocol/disco"
+//#define FID_DISCO "http://jabber.org/protocol/disco"
 bool Features::canDisco() const
 {
 	QStringList ns;
@@ -817,7 +817,7 @@
 	return test(ns);
 }
 
-#define FID_VCARD "vcard-temp"
+//#define FID_VCARD "vcard-temp"
 bool Features::haveVCard() const
 {
 	QStringList ns;
@@ -825,7 +825,7 @@
 
 	return test(ns);
 }
-
+/*
 class Features::FeatureName : public QObject
 {
 	Q_OBJECT
@@ -861,6 +861,9 @@
 };
 
 static Features::FeatureName *featureName = 0;
+*/
+
+static Features::FeatureName *featureName = 0;
 
 long Features::id() const
 {
diff -u /home/till/kde/libxmpp/xmpp/src/xmpp_types.h ./xmpp_types.h
--- /home/till/kde/libxmpp/xmpp/src/xmpp_types.h	2003-06-18 19:39:48.000000000 +0200
+++ ./xmpp_types.h	2003-08-26 21:01:32.000000000 +0200
@@ -27,9 +27,18 @@
 #include<qdatetime.h>
 #include"xmpp_jid.h"
 
+#include<qmap.h>
+#include<qapplication.h>
+
 class QDomElement;
 class QDomDocument;
 
+const QString FID_REGISTER = "jabber:iq:register";
+const QString FID_SEARCH = "jabber:iq:search";
+const QString FID_GROUPCHAT = "jabber:iq:conference";
+const QString FID_GATEWAY = "jabber:iq:gateway";
+const QString FID_DISCO = "http://jabber.org/protocol/disco";
+const QString FID_VCARD = "vcard-temp";
 
 namespace Jabber
 {
@@ -186,7 +195,7 @@
 		class RosterPrivate *d;
 	};
 
-        class Features
+	class Features
 	{
 	public:
 		Features();
@@ -383,6 +392,41 @@
 		Jid v_jid;
 		QString v_nick, v_first, v_last, v_email;
 	};
+
+
+	class Features::FeatureName : public QObject
+	{
+		Q_OBJECT
+	public:
+		FeatureName()
+		: QObject(qApp)
+		{
+			id2s[FID_Invalid]	= tr("ERROR: Incorrect usage of Features class");
+			id2s[FID_None]		= tr("None");
+			id2s[FID_Register]	= tr("Register");
+			id2s[FID_Search]	= tr("Search");
+			id2s[FID_Groupchat]	= tr("Groupchat");
+			id2s[FID_Gateway]	= tr("Gateway");
+			id2s[FID_Disco]		= tr("Service Discovery");
+			id2s[FID_VCard]		= tr("VCard");
+
+			// compute reverse map
+			//QMap<QString, long>::Iterator it = id2s.begin();
+			//for ( ; it != id2s.end(); ++it)
+			//	s2id[it.data()] = it.key();
+
+			id2f[FID_Register]	= FID_REGISTER;
+			id2f[FID_Search]	= FID_SEARCH;
+			id2f[FID_Groupchat]	= FID_GROUPCHAT;
+			id2f[FID_Gateway]	= FID_GATEWAY;
+			id2f[FID_Disco]		= FID_DISCO;
+			id2f[FID_VCard]		= FID_VCARD;
+		}
+
+		//QMap<QString, long> s2id;
+		QMap<long, QString> id2s;
+		QMap<long, QString> id2f;
+	};
 }
 
 #endif
