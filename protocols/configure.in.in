AC_DEFUN([AC_LIBGADU_DEFINE],
[
sed -e "s/#undef __GG_LIBGADU_$1/#define __GG_LIBGADU_$1/" \
${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h > ${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h.1
mv ${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h.1 ${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h
])
	 
LIBGG_INCLUDES=""
LIBGG_LIBS=""
ac_libgadu_includes=""
ac_libgadu_libs=""

AC_ARG_WITH(libgadu-includes,
	[  --with-libgadu-includes=DIR  where the libgadu includes are. ],
	[  ac_libgadu_includes="$withval" ])

if test "$ac_libgadu_includes" != "" ; then
LIBGG_INCLUDES="-I$ac_libgadu_includes"
fi

AC_ARG_WITH(libgadu-libs,
	[  --with-libgadu-libs=DIR  where the libgadu libraries are. ],
	[  ac_libgadu_libs="$withval" ])

if test "$ac_libgadu_libs" != "" ; then
	LIBGG_LIBS="-L$ac_libgadu_libs"
fi


ac_save_LIBS="$LIBS"
ac_save_CXXFLAGS="$CXXFLAGS"
LIBS="$LIBGG_LIBS -lgadu $LIBPTHREAD"
CFLAGS="$CFLAGS $LIBGG_INCLUDES"
AC_MSG_CHECKING([libgadu version 1.5(rcX) with pthread support])
	AC_TRY_RUN(
	[
	
	#include <libgadu.h>
	#include <stdio.h>
	#include <string.h>
		
	int main()
	{
#if defined __GG_LIBGADU_HAVE_PTHREAD && defined GG_LOGIN60
		int maj, min, date;
		sscanf( gg_libgadu_version(), "%u.%u.%u", &maj,&min,&date );
		if ( maj != 1 ) {
			return 1;
		}
		if ( ( min == 4 || min == 5 ) && date < 20040520 ) {
			return 1;
		}

		if ( min == 5 ){
			return 0;
		}
			     
#endif
	    return 1;
	}
	], [
	LIBGG_LIBS="$LIBGG_LIBS -lgadu $LIBPTHREAD"
	AC_MSG_RESULT([yes])
	AC_SUBST(LIBGG_INCLUDES)
	AC_SUBST(LIBGG_LIBS)
	COMPILE_GADU=true
	AC_SUBST(COMPILE_GADU)
	use_libgadu_copy=
	], [
	if test "$kde_use_threading" = "yes" ; then
	AC_MSG_RESULT([no, falling back on supplied libgadu-copy])
	use_libgadu_copy=yes
	COMPILE_GADU=true
	else
	use_libgadu_copy=
	AC_MSG_RESULT([no, cannot fall back on libgadu-copy (no pthread)])
	COMPILE_GADU=	
	fi
	AC_SUBST(COMPILE_GADU)	
	])
AM_CONDITIONAL(include_gadu, test -n "$COMPILE_GADU")
AM_CONDITIONAL(include_libggcopy, test -n "$use_libgadu_copy")
LIBS="$ac_save_LIBS"
CXXFLAGS="$ac_save_CXXFLAGS"


if test "$use_libgadu_copy" = "yes"; then
	cp ${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h.in \
	${srcdir}/kopete/protocols/gadu/libgadu/libgadu-config.h
	if test "$ac_cv_c_bigendian" = "yes"; then
		AC_LIBGADU_DEFINE([BIGENDIAN])	
	fi
	KDE_CHECK_LONG_LONG()
	if test "$kde_cv_c_long_long" = "yes"; then
	AC_LIBGADU_DEFINE([HAVE_LONG_LONG])
	fi
	KDE_CHECK_SSL()
	if test  "$have_ssl" = "yes"; then
	AC_LIBGADU_DEFINE([HAVE_OPENSSL])
	fi
	AC_MSG_CHECKING([for C99-compatible vsnprintf()])
	AC_TRY_RUN(
	[
		#include <stdio.h>
		int main()
		{
			char tmp;
			return (snprintf(&tmp, sizeof(tmp), "test") != 4);
		}
	],[
		AC_MSG_RESULT([yes])
		AC_LIBGADU_DEFINE([HAVE_C99_VSNPRINTF])
	], [
		 AC_MSG_RESULT([no])
	])
	AC_CHECK_FUNCS([va_copy],
		       [AC_LIBGADU_DEFINE([HAVE_VA_COPY])],[])
	AC_CHECK_FUNCS([_va_copy],
		       [AC_LIBGADU_DEFINE([HAVE__VA_COPY])],[])
fi


AC_ARG_WITH(libidn, AC_HELP_STRING([--with-libidn=[DIR]],
            [Support IDN (needs GNU Libidn)]),
            libidn=$withval, libidn=yes)

if test "$libidn" != "no"; then
	if test "$libidn" != "yes"; then
		IDN_LDFLAGS="${LDFLAGS} -L$libidn/lib"
		IDN_CPPFLAGS="${CPPFLAGS} -I$libidn/include"
	fi
fi

KDE_CHECK_HEADER(idna.h,, libidn=no)

if test "$libidn" != "no" ; then
	KDE_CHECK_LIB(idn, stringprep_check_version,
		[libidn=yes; IDN_LIBS="-lidn"], libidn=no)
fi

if test "$libidn" != "no" ; then
	AC_DEFINE(LIBIDN, 1, [Define to 1 if you want IDN support.])
else
	AC_MSG_WARN([Libidn not found, Kopete Jabber plugin will not be compiled])
fi

AC_MSG_CHECKING([if Libidn can be used])
AC_MSG_RESULT($libidn)

AM_CONDITIONAL(include_jabber, test "$libidn" = "yes")

AC_SUBST(IDN_LDFLAGS)
AC_SUBST(IDN_CPPFLAGS)
AC_SUBST(IDN_LIBS)

# meanwhile support
# default is not to compile
# if enabled, check that meanwhile and glib headers/libs are present

AC_ARG_WITH(meanwhile, [  --with-meanwhile    Compile meanwhile support for kopete], meanwhile=yes, meanwhile=no)

if test "x$meanwhile" = "xyes" ; then
    #TODO: check for libs/headers

    MEANWHILE_INCLUDES="-I/usr/include/meanwhile"
    MEANWHILE_LIBS="-lmeanwhile"
    GLIB_INCLUDES="-I/usr/lib/glib-2.0/include -I/usr/include/glib-2.0 -I/usr/include/glib-2.0/glib"
    GLIB_LIBS="-lglib-2.0"
    
    COMPILE_MEANWHILE=true
    AC_SUBST(MEANWHILE_INCLUDES)
    AC_SUBST(MEANWHILE_LIBS)
    AC_SUBST(GLIB_INCLUDES)
    AC_SUBST(GLIB_LIBS)
fi

AM_CONDITIONAL(include_meanwhile, test -n "$COMPILE_MEANWHILE")
