LIBGG_INCLUDES=""
LIBGG_LIBS=""
ac_libgadu_includes=""
ac_libgadu_libs=""

AC_ARG_WITH(libgadu-includes,
	[  --with-libgadu-includes=DIR  where the libgadu includes are. ],
	[  ac_libgadu_includes="$withval" ])

if test "$ac_libgadu_includes" != "" ; then
LIBGG_INCLUDES="-I$ac_libgadu_includes"
fi

AC_ARG_WITH(libgadu-libs,
	[  --with-libgadu-libs=DIR  where the libgadu libraries are. ],
	[  ac_libgadu_libs="$withval" ])

if test "$ac_libgadu_libs" != "" ; then
	LIBGG_LIBS="-L$ac_libgadu_libs"
fi


ac_save_LIBS="$LIBS"
ac_save_CXXFLAGS="$CXXFLAGS"
LIBS="$LIBGG_LIBS -lgadu $LIBPTHREAD"
CFLAGS="$CFLAGS $LIBGG_INCLUDES"
AC_MSG_CHECKING([libgadu version 1.4rc2, 1.4, 1.5(rcX) with pthread support])
	AC_TRY_RUN(
	[
	
	#include <libgadu.h>
	#include <stdio.h>
	#include <string.h>
		
	int main()
	{
#if defined __GG_LIBGADU_HAVE_PTHREAD && defined GG_LOGIN60
		int maj, min, date;
		sscanf( gg_libgadu_version(), "%u.%u.%u", &maj,&min,&date );
		if ( maj != 1 ) {
			return 1;
		}
		if ( min == 3 && date < 20031020 ) {
			return 1;
		}

		if ( min == 4 || min == 5 ){
			return 0;
		}
			     
#endif
	    return 1;
	}
	], [
	LIBGG_LIBS="$LIBGG_LIBS -lgadu $LIBPTHREAD"
	AC_MSG_RESULT([yes])
	AC_SUBST(LIBGG_INCLUDES)
	AC_SUBST(LIBGG_LIBS)
	COMPILE_GADU=true
	AC_SUBST(COMPILE_GADU)
	], [
	AC_MSG_RESULT([no])
	COMPILE_GADU=
	AC_SUBST(COMPILE_GADU)
	])
AM_CONDITIONAL(include_gadu, test -n "$COMPILE_GADU")
LIBS="$ac_save_LIBS"
CXXFLAGS="$ac_save_CXXFLAGS"

AC_ARG_WITH(libidn, AC_HELP_STRING([--with-libidn=[DIR]],
            [Support IDN (needs GNU Libidn)]),
            libidn=$withval, libidn=yes)

if test "$libidn" != "no"; then
	if test "$libidn" != "yes"; then
		LDFLAGS="${LDFLAGS} -L$libidn/lib"
		CPPFLAGS="${CPPFLAGS} -I$libidn/include"
	fi
fi

AC_CHECK_HEADER(idna.h,
		AC_CHECK_LIB(idn, stringprep_check_version,
				[libidn=yes LIBS="${LIBS} -lidn"], libidn=no),
		libidn=no)

if test "$libidn" != "no" ; then
	AC_DEFINE(LIBIDN, 1, [Define to 1 if you want IDN support.])
else
	AC_MSG_WARN([Libidn not found, Kopete Jabber plugin will not be compiled])
fi

AC_MSG_CHECKING([if Libidn can be used])
AC_MSG_RESULT($libidn)

AM_CONDITIONAL(include_jabber, test "$libidn" != "no")
