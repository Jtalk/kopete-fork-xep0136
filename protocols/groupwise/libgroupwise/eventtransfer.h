//
// C++ Interface: eventtransfer
//
// Description: 
//
//
// Author: Kopete Developers <kopete-devel@kde.org>, (C) 2004
//
// Copyright: See COPYING file that comes with this distribution
//
//
#ifndef GW_EVENTTRANSFER_H
#define GW_EVENTTRANSFER_H

#include <qcstring.h>
#include <qdatetime.h>

#include <transfer.h>

/*#define	NMEVT_INVALID_RECIPIENT			101
#define	NMEVT_UNDELIVERABLE_STATUS		102
#define	NMEVT_STATUS_CHANGE				103
#define	NMEVT_CONTACT_ADD				104
#define	NMEVT_CONFERENCE_CLOSED			105
#define	NMEVT_CONFERENCE_JOINED			106
#define	NMEVT_CONFERENCE_LEFT			107
#define	NMEVT_RECEIVE_MESSAGE			108
#define	NMEVT_RECEIVE_FILE				109
#define NMEVT_USER_TYPING				112
#define NMEVT_USER_NOT_TYPING			113
#define NMEVT_USER_DISCONNECT			114
#define NMEVT_SERVER_DISCONNECT			115
#define NMEVT_CONFERENCE_RENAME			116
#define NMEVT_CONFERENCE_INVITE			117
#define NMEVT_CONFERENCE_INVITE_NOTIFY	118
#define NMEVT_CONFERENCE_REJECT			119
#define NMEVT_RECEIVE_AUTOREPLY			121
#define NMEVT_START						NMEVT_INVALID_RECIPIENT
#define NMEVT_STOP						NMEVT_RECEIVE_AUTOREPLY*/
namespace Event {
	
};

/**
@author Kopete Developers
*/
class EventTransfer : public Transfer
{
public:
	/**
	 * Transfer representing an event, a message generated by the server in response to external stimulus
	 * As much data as possible is parsed before creating the EventTransfer, but some of it is dependent on the
	 * type of event, so we pass an opaque payload here and the Task that handles the event will extract it.
	 * @param eventType the event code describing the event, see @ref GroupWise::Event.
	 * @param source the user generating the event.
	 * @param timeStamp the time at which the event was received.
	 * @param payload the remaining bytes describing the event
	 */
	EventTransfer( const Q_UINT32 eventType, const QString & source, QDateTime timeStamp, const QByteArray & payload );
	~EventTransfer();
	
	TransferType type() { return Transfer::EventTransfer; }
	QByteArray payload();
	int event();
	QString source();
	QDateTime timeStamp();
private:
	int m_eventType;
	QString m_source;
	QDateTime m_timeStamp;
	QByteArray m_payload;
};

#endif
