Address book integration notes 26/08/03

Use cases

1) Add new metacontact + contacts using Add Contact Wizard
	Decide whether to associate or not if using mandatory association.
    a) Matching addressbook entry already exists
	- Need to choose kabc entry in ACW?
	- Check if kabc entry already contains IM information (old install of Kopete or from another client)
	b) No matching entry exists
	- Need to add new one

2) Someone adds you - protocol notifies and creates (temporary?) MC.
	(Martijn says this becomes the same as 1) when the MC is made permanent)

3)  All new Kopete (first run / no existing configs or contactlist)
	Add accounts
	Server Side Contact List (SSCL) fetched, lots of permanent contacts are created.
*)  Consider if 2 accounts are added and there are contacts from different accounts such that they represent the same person.  They belong in the same MC.  MC merging should take place prior to kabc association.

4)  An existing Kopete config is present and we upgrade to a version of Kopete supporting kabc.

5a)  After abandoning Kopete, users start using a different KDE IM client, and would like to use the IM address details stored in the KDE address book.

5b)  The user used another KDE IM Client.  But he finally discovers Kopete,which is the best, decides to use it, and he would like to use information already existing in KABC

6)  Protocols may deliver contact data that users may want to aggregate into the kabc entry.

7)  A contact adds a new IM account, either the user decides to add the new account to the MC manually, or the contact messages the user first, we get a temporary contact Kopete side, add them to the MC.

8) The user no longer wishes to have a particular contact (or even metacontact) in Kopete, and deletes the object.

9) A contact changes accounts (msn:foo@uncool.org -> foo@cool.org).  This is the same as 7) then 8).

Implementation notes
--------------------
1) New MC.  Need dialogs to ask if association needed. Association dialog allows to select/search kabc contacts.  We need to write the kabc data sooner than closing Kopete!

2) Same as 1)

3) Not an issue given optional participation
*) is orthogonal and can be dealt with separately.

4) Deferred association

5a) We don't want any Kopete specific data in the kabc.  Entries should be usable by other KDE IM apps.

5b) The reverse case, therefore we should agree standard entry format with other apps.
    We should also make using this info really easy in the Add Contact Wizard (see below).

6) Question: how to combine all contacts in an MCs' data before saving this to kabc.

7) First do dupe check or 'im-info-in-kabc-not-in-kopete' check in case this information already exists in KABC.  Once added to a MC, if already associated, we can add the new contact information to kabc immediately, otherwise Deferred association accessed via MC properties dialog.

8) Don't remove the kabc fields, other IM clients might be using them.  So we just remove them from the Kopete contact list.  Dupe contact on the MC add contact thingy will catch if the contact is added again.  (and the user might still want to have other data like the phone number) * See the kabc section

Therefore we need an Association Dialog accessed in wizard and from the MC properties dialog.  Note, this name sucks, don't write any classes using it.

Side Issues
-----------

It's not possible to add >1 contact per protocol using the ACW.  Martijn: >1 contact per MC is for power users, they can add extra contacts using the MC's context menu. Change to an iterative ACW would fix this.


Possible ACW order including kabc
---------------------------------
1) Welcome :P
2) Choose Account
3) Fill in protocol details
4) Select Group
5) Select kabc contact from list | create new | create none

6) - if the user selected to create a new entry in the KAB, show the page showed when you add normaly a new KAB entry (if possible where some fields are
   - if the user selected to search in the existing KABC database, show a nice widget to search one user.
       (I hope there is nice KParts in KABC)

( 5) could come after the welcome but this might be too different for users to swallow... Will)
        agreed - Olivier
        yup - Matt
If we delay the KABC assoc question until after contacts are added, we cannot use any IM information
that is already present in KABC.  And if different contacts are in the KABC, this might surprise the user when 
the KMC appears in the contactlist with extra contacts.·
 
So it would be better if we performed this check before adding any contacts, in the ACW

Olivier: I think a step (the first?) should be to ask a displayname for the metacontact.

1) Welcome :P
2) Do you want to use the KDE Addressbook for this contact, or restrict it to Kopete?
   ( Could have a 'remember my choice and don't ask again option' ).
( or else goto A )
3) Choose addressee or add new addressee.
   (Check that the addressee is not already associated with an MC)
   (Mark the contact as 'In KABC' or can we just use valid vs invalid KABC UIDs to show relation?
   (Chances are next time the user adds a KABC addressee it will coincide with an existing Kopete UID).
4) (Check to see if IM fields are already present in KABC)
5a)"The addressbook already contained the following IM information..  
(goto C)

A) How would you like to IM XXX?
B) Fill in contact details 
   (Add duplicate check after validity check)
C) Use another protocol?

D) Finish screen

NB) Better to move to a serial selection of protocols (Select protocol -> fill in details -> Select protocol or done ...).
This way power users can add +1 contact per protocol without complicating the ACW for simple users.

wow wow wow...  this make a big ACW, but a quick add feature would still be desired by people like this:
Bug 53062: Adding contacts more quickly

Adding fields to kabc
~~~~~~~~~~~~~~~~~~~~~
Either - all new addressee, no IM + new IM to add | existing address, no IM + new IM to add 
| existing addressee, no IM + new IM to add | existing addressee, existing IM + new IM to add | existing addressee, existing IM + nothing to add

I think we're going to need a more complex data structure to tell KCL::addMetaContact what it has to do.

Fields to put in kabc
~~~~~~~~~~~~~~~~~~~~~
Relation between kabc entries and kopete metacontacts could be 1:1 or 1:many.  1:1 is neatest.

In Kopete contact list:
include UID from related kabc entry

In kabc
Something like X-MESSAGING-MSN:bob@hotmail.com for each protocol account that contact uses.

We should keep the extra stuff in kabc to a minimum.  We can store nicknames in contactlist.xml.

We should allow plugins to save some data:
Some protocol allow to reach phone numbers, or more (see the ICQ info page)
It would be usefull if KABC could remember what application writes an entry. so when ICQ try to modify an e-mail, only the "icq-email" is affected

Or like the language or the PGP public key

It is too complex to store the phone number according to icq as well as the kabc phone number and every other protocol's idea of phone.  The fields would be of no use to any app other than the inserting program or else we would have to update the world.  We *should* have a facility to insert information obtained from protocols into the common kabc fields but this is a hard problem to solve neatly.
 - - I think it is not, ICQ phone number ~should~ be the same as all others one.  storing it here is just a way to *centralise* all information about someone.  Then, when you want to know his phone number, you look only there, and not at every place
 		*problem: how to trust the information? that's why kabc could handle a source of the information


KABC Participation modes
------------------------

Participation in the relation can be optional or mandatory.

Optional
~~~~~~~~
Scenario 1:
1) New Kopete install or account
2) Ask 'New contacts added, associate with KDE Address book?'
3) Yes: Pop up association dialog
   No:  Do nothing

Scenario 2:
1) New Kopete install or account
2) Do nothing
3) Deferreed association - user performs associate when they want to

For/In Favour
~~~~~~~~~~~~~
.) easier to code
.) easier migration
.) doesn't disturb people who don't want it
.) unobtrusive

Against
~~~~~~~
.) less consistent
	(can someone explain me this? -Olivier)
	Yes, I need more explanation on what consistent means. - Matt
.) may confuse user?
	how?

Mandatory
~~~~~~~~~
Scenario 1
1) When fetching SSCL, automatically create synthetic kabc entries.
Scenario 2
1) Fetch SSCL, ask user to create kabc entry normally.
Hybrid 1-2
1) Fetch SSCL
2) Match SS contacts with kabc entries and associate automatically.  Unmatched contacts are associated with synthetic kabc entries.

For
~~~
.) Can integrate with kabc contacts without disturbing user

Against
~~~~~~~
.) User has control of address book, this removes that control.
.) Synthetic entries may be duplicates of existing user added entries and user will have to reassociate MCs with correct entries and throw out the synthetic entries.
.) Hybrid approach may be too complex for user to comprehend.
.) this will be slow to add hundred of contacts when syncing the contactlist for the first time

KDE PIM Apps' use of Kopete
--------------------------

Use cases

1) Email client or contact management app displays email sender's IM status if known.

2) Email client or contact management app wants to use Kopete as transport for something (vCard?).

Notes

Client would need to identify addressbook entries that are IM contactable, and obtain status information from an IM app or library.

David Faure says it's possible to do loose lazy binding to the app responsible for providing status information as in 1).  Something to do with KTrader and DCOP.  We would need some DCOP to return status info to the client from the IM app.

Showing the IM status of a contact in KMail, in KAdressBook....
A "reply-by-IM" action in KMail

such as things could be done. but how?

The application could know if this user is registered to an IM by looking at messaging fields
But how to use such as information available only at runtime, like the Status.

1) Saving the status to KABC
   --the problem is that the status can not be reseted to offline if kopete crashed

2) KMail could contact Kopete via DCop
   --too bad if i want to use another IM Client?

3) add an interface in kabc (or other) which could contact Kopete, or the IM which is actualy running.  This is in effect what dfaure suggested above.

KDE Games/Desktop sharing use of Kopete
---------------------------------------
Use cases

1) Program wants to use Kopete as transport for game/desktop sharing invitation.

Notes

As above, client must identify IM contactable addressbook entries, obtain status information and get the IM app to send the invite (inline/file transfer).  Some protocols may not support file transfer though.  Do we need a capabilities interface on the IM apps, or just use the lowest common denominator?

On receipt of the invitation, IM app needs to recognise the invite and relay it to the recipient (similar lazy loose binding?).  In Kopete we could do this in a plugin, quite neatly.

Some problem:
  Each protocol does that in a different way.  The Game/Application  need to know some protocol specific stuff (the MSN application ID for example)

  I was thinking about Atlantik, and other games that are protocol independent.  "Protocol games" are protocols' problems.



 'myself' integration
=======================

Some protocols allow to send some personale information like real name, phone number, adress, ...   (see icq user info)
It would be cool if theses information about the users itself could be obtained from KAB.

see also Bug 63297: "meta-contact" global(local) display nickname for all accounts

Notes: some user might don't want to export their info the the server.

Yes this would be cool.  I think we need a general UI to control the flow of contact information between kabc and kopete.  The myself issue is the same as the metacontacts issue.


What about the API?
=====================

 In KABC
---------
The actual add to kabc could be performed in KopeteContactList::addMetaContact()

ACW::accept() -> KopeteContactList::adddMetaContact()

Here is a suggestion. I don't know if that already works like that in KABC.
AFAIK by reading the KABC API documentation, it use somme different c++ function to access/modify some stuff.
With this implementation, it is not possible to make that transparent for plugin.  That mean the PGP plugin need to call dirrectly the KABC API (with Adressee::pgpKey()) for example.

My idea is to give for each fields a String, like for MIME-Type
so fields could be application/pgp-public-key    (do you see what i mean?)
We can even add the possibility to have several entries for one field (StringList)  (several emails for example)

Theses key could be stendardized (freedesktop.org ?)

 In Kopete:
------------

I think we will need to change the xml format of the contactlist, and the whole pluginData thing.

The idea is to have the same fields in Kopete than in KABC.
Gof: This was not our idea, we intend not to pollute the KABC with any more extra fields than necessary.  Kopete's info may not be useful to other IM apps (Will)

so for example, the pgp plugin will request the public key:
metacontact->data("application/pgp-public-key");

if the contact is in KABC, then libkopete will request info from kabc. Else, it will take the data stored internaly in the contactlist.xml (Gof)

This is a good question.  I think since we have the constraint that we have to keep kabc clean, this is the way to do it. (Will)

for contacts same things.
Anyway? what if we have several contact in one metacontact.
for example:

messenging/msn         =>   xxx@msn.com ; yyy@msn.com   (it's a StringList)
messenging/nickname    =>    Mr. X ; Mr. Y

that looks fine, but how to make sure than Mr. X is for xxx@msn.com, imagine if we have icq contact, or other? (Gof)
We should never store nicknames in kabc.  The metacontact name should be taken from the kabc formatted name (Will)

Of course every fields shouldn't be stored in KABC (for example: MSN's groups, or others)
to know what can be saved or not in kabc, i see two ways:
1) KopeteMetaContact::setData( QString key , QString data , bool saveToKAB);
2) if the key is or not recognised by KABC. example, if i save  "messanging/msn-groups"  KAB is not able to store it, so don't store it in KABC


Syncing contactlist info currently takes place when Kopete exits.  other kabc apps write kabc during their runs.  We will have to make changes to do this and to make sure that we don't try to write 200 kabc entries simultaneously with individual tickets after fetching the SSCL for a new account.

I don't think that syncing the KAB on an SSCL fetch is necessary. The only information we get when we fetch the SSCL is the contact name of that person who is on our SSCL, it's not until later, perhaps when we request the user info that we update the KAB. (Matt)
